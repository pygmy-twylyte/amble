[[triggers]]
name = "Inca-Road: Traveling Without Towel"
only_once = true
conditions = [
    { type = "enter", room_id = "inca-road" },
    { type = "missingItem", item_id = "towel" },
]
actions = [{ type = "showMessage", text = """
You pause here, realizing with increasing concern that you are traveling in
a strange land without a towel.
""" }]

[[triggers]]
name = "Global: Got-Towel"
only_once = true
conditions = [{ type = "take", item_id = "towel" }]
actions = [
    { type = "addFlag", flag = "got-towel" },
    { type = "awardPoints", amount = 2 },
    { type = "showMessage", text = """
Now you're a frood who really knows where his towel is.
""" },
]

[[triggers]]
name = "Loading-Dock: Spawn Special Delivery"
only_once = true
conditions = [{ type = "leave", room_id = "loading-dock" }]
actions = [
    { type = "spawnItemInRoom", item_id = "delivery_box", room_id = "loading-dock" },
    { type = "showMessage", text = """
You hear a thud behind you, back toward the dock, like something was just
dropped off. You glimpse a drone flying away quickly, as if hoping not to
be seen. Was that an Initech logo on the side?
""" },
]

[[triggers]]
name = "Global: Open-Delivery-Box"
only_once = true
conditions = [{ type = "open", item_id = "delivery_box" }]
actions = [
    { type = "despawnItem", item_id = "delivery_box" },
    { type = "spawnItemCurrentRoom", item_id = "destroyed_box" },
    { type = "spawnItemCurrentRoom", item_id = "towel" },
    { type = "showMessage", text = """
The box sighs and collapses in a heap as soon as you touch it, relieved that its
mission is over. Inside, you find a nanotruss-reinforced tachyon-powered towel
with an attached note:

                Always be a frood who knows where his towel is.
                                -- F.P.
""" },
]

[[triggers]]
name = "Global: Take-Vogon-Poetry"
only_once = false
conditions = [{ type = "take", item_id = "vogon_poetry_book" }]
actions = [
    { type = "showMessage", text = "A greasy feeling of nausea envelops you." },
]

[[triggers]]
name = "Global: Drop-Vogon-Poetry"
only_once = false
conditions = [
    { type = "drop", item_id = "vogon_poetry_book" },
    { type = "missingFlag", flag = "read-vogon-poetry" },
]
actions = [
    { type = "showMessage", text = "That greasy, queasy feeling subsides." },
]

[[triggers]]
name = "Office: Open-Poetry-Performer"
only_once = false
conditions = [{ type = "open", item_id = "poetry_performer" }]
actions = [{ type = "showMessage", text = """
The machine clicks on and hums. A flashing red light warns:
            ⚠️ NOT FOR USE WITH VOGON POETRY ⚠️
""" }]

# START LOUNGE, PORTAL GUN TRIGGERS
# remove rug to reveal hidden exit to portal room
[[triggers]]
name = "Lounge: Found Portal Room"
only_once = true
conditions = [{ type = "take", item_id = "lebowski_rug" }]
actions = [
    { type = "revealExit", direction = "trapdoor", exit_from = "lounge", exit_to = "portal-room" },
    { type = "addFlag", flag = "found-portal-room" },
    { type = "awardPoints", amount = 3 },
    { type = "showMessage", text = """
Light shines around the edges of a trapdoor revealed in the floor when you move
the rug.
""" },
]

# give portal_powered flag when charged battery inserted
[[triggers]]
name = "Portal-Room: Gun Powered"
only_once = false
conditions = [
    { type = "insert", item_id = "charged_battery", container_id = "portal_gun" },
]
actions = [
    { type = "addFlag", flag = "portal-gun-powered" },
    { type = "awardPoints", amount = 5 },
    { type = "restrictItem", item_id = "charged_battery" },
    { type = "showMessage", text = """
Arcing wildly as you insert it, the fully charged 20 KV battery fuses itself
to the contacts inside the portal gun -- when then emits a quick high-pitched
whine. The POWER indicator lights a steady green.
""" },
]

# turn on: if gun powered, open portal exit to Aperture Science Laboratory
[[triggers]]
name = "Portal-Room: Open Portal"
only_once = true
conditions = [
    { type = "useItem", item_id = "portal_gun", ability = "turnOn" },
    { type = "hasFlag", flag = "portal-gun-powered" },
]
actions = [
    { type = "revealExit", direction = "portal", exit_from = "portal-room", exit_to = "aperture-lab" },
    { type = "showMessage", text = """
A loud \"Squip!\" comes from the gun. The wall in front of it sizzles for a
moment, and then a crackling oval blue portal expands on the wall to reveal a
laboratory space on the other side.
""" },
]

# turn on: fail, gun not powered yet
[[triggers]]
name = "Portal-Room: Can't Turn Gun On Without Power"
only_once = false
conditions = [
    { type = "useItem", item_id = "portal_gun", ability = "turnOn" },
    { type = "missingFlag", flag = "portal-gun-powered" },
]
actions = [
    { type = "showMessage", text = "When you press the button, the power LED briefly flashes red, then goes dark." },
]

# START LAB PRINTER TRIGGERS
[[triggers]]
name = "Aperture-Lab: Printer Burns Paper"
only_once = false
conditions = [
    { type = "containerHasItem", container_id = "lab_printer", item_id = "printer_paper" },
    { type = "useItem", item_id = "lab_printer", ability = "turnOn" },
]
actions = [
    { type = "despawnItem", item_id = "printer_paper" },
    { type = "spawnItemInRoom", item_id = "burnt_invitation", room_id = "aperture-lab" },
    { type = "showMessage", text = "The paper ignites with a flash, and the PlasmaJet spits it onto the floor." },
    { type = "showMessage", text = """
A nearby smoke detector alarms briefly, then quits with an exasperated sigh
when it sees you using the printer.
""" },
]

[[triggers]]
name = "Aperture-Lab: Print Invitation (Asbestos)"
only_once = true
conditions = [
    { type = "containerHasItem", item_id = "asbestos_sheet", container_id = "lab_printer" },
    { type = "useItem", item_id = "lab_printer", ability = "turnOn" },
]
actions = [
    { type = "addFlag", flag = "invitation-sans-ignition" },
    { type = "awardPoints", amount = 10 },
    { type = "despawnItem", item_id = "asbestos_sheet" },
    { type = "spawnItemInRoom", item_id = "invitation", room_id = "aperture-lab" },
    { type = "showMessage", text = """
The PlasmaJet emits a blinding flash of light, leaving a printer-shaped purple
blob in your visual field for a few moments.
""" },
    { type = "showMessage", text = """
When your vision clears, you see a slightly glowing printed invitation on the
floor.
""" },
]

# messages and flag when invitation is acquired
[[triggers]]
name = "Aperture-Lab: Take Invitation Using Towel"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "towel", target_id = "invitation", interaction = "handle" },
]
actions = [
    { type = "despawnItem", item_id = "invitation" },
    { type = "spawnItemInInventory", item_id = "invitation" },
    { type = "addFlag", flag = "got-invitation" },
    { type = "awardPoints", amount = 5 },
    { type = "showMessage", text = """
Using the towel as a potholder, you are able to get the piping hot invitation
into your pack.""" },
]

[[triggers]]
name = "Aperture-Lab: Drop Invitation w/o Using Towel"
only_once = false
conditions = [
    { type = "take", item_id = "invitation" },
    { type = "missingItem", item_id = "towel" },
]
actions = [
    { type = "despawnItem", item_id = "invitation" },
    { type = "spawnItemCurrentRoom", item_id = "invitation" },
    { type = "showMessage", text = """
You burn your fingers and drop the invitation on the floor. It emits a reddish
glow, and shimmers from the radiating heat.""" },
]

[[triggers]]
name = "Aperture-Lab: Invitation Hint"
only_once = true
conditions = [
    { type = "take", item_id = "invitation" },
    { type = "hasVisited", room_id = "b-a-office" },
]
actions = [
    { type = "showMessage", text = "Maybe now that snooty reception droid at the office will be more helpful..." },
]

# START TRIGGERS FOR VOGON POETRY --> OPEN PANIC ROOM
[[triggers]]
name = "Office: Insert Vogon Poetry -> Reveal Panic Room"
only_once = true
conditions = [
    { type = "insert", item_id = "vogon_poetry_book", container_id = "poetry_performer" },
]
actions = [
    { type = "despawnItem", item_id = "vogon_poetry_book" },
    { type = "addFlag", flag = "panic-room-open" },
    { type = "revealExit", direction = "west", exit_from = "b-a-office", exit_to = "poetry-panic" },
    { type = "showMessage", text = """
The machine begins to whine at a high pitch and gives off a noxious odor of
burning hair. A klaxon blares and the display warns:

            ⚠️ VOGON INPUT DETECTED - POETRY PANIC ROOM UNLOCKED ⚠️
               ☣ VAPORIZING VOGON INPUT - AVOID TOXIC FUMES ☣

The whiteboard on the west wall slides to the side, revealing a vault-like door.
""" },
]

# START ELEVATOR ACTIVATION TRIGGERS
# (note: life exit no longer added here -- now exists from the start but is
# disabled if player isn't carrying the pass and keycard.
[[triggers]]
name = "Elevator: Activate-Elevator"
only_once = true
conditions = [
    { type = "enter", room_id = "lift-bank-main" },
    { type = "hasItem", item_id = "elevator_keycard" },
]
actions = [{ type = "showMessage", text = """
As you approach, the keycard in your pack chirps twice and the elevator springs
to life. A Muzak version of Porcupine Tree's "The Sound of Muzak" plays softly.
""" }]

[[triggers]]
name = "Lobby: First Gonk Encounter"
only_once = true
conditions = [
    { type = "enter", room_id = "main-lobby" },
    { type = "withNpc", npc_id = "gonk_droid" },
    { type = "hasItem", item_id = "towel" },
]
actions = [{ type = "showMessage", text = """
A gonk droid clomps around the room, muttering. You can never find one
when you need one. Your towel is fully charged, of course.
""" }]

# B-A Receptionist Triggers
[[triggers]]
name = "Office: Snooty-Receptionist-If-No-Pass"
only_once = false
conditions = [
    { type = "withNpc", npc_id = "b_a_receptionist" },
    { type = "missingFlag", flag = "got-visitor-pass" },
    { type = "missingFlag", flag = "got-elevator-keycard" },
]
actions = [
    { type = "setNpcMood", npc_id = "b_a_receptionist", mood = "Normal" },
]

[[triggers]]
name = "Office: Helpful-Receptionist-If-Have-Pass"
only_once = false
conditions = [
    { type = "withNpc", npc_id = "b_a_receptionist" },
    { type = "hasFlag", flag = "got-visitor-pass" },
    { type = "missingFlag", flag = "got-elevator-keycard" },
]
actions = [{ type = "setNpcMood", npc_id = "b_a_receptionist", mood = "Happy" }]

[[triggers]]
name = "Office: Grant-Visitor-Pass"
only_once = true
conditions = [
    { type = "giveToNpc", item_id = "invitation", npc_id = "b_a_receptionist" },
]
actions = [
    { type = "addFlag", flag = "got-visitor-pass" },
    { type = "despawnItem", item_id = "invitation" },
    { type = "spawnItemInInventory", item_id = "visitor_pass" },
    { type = "awardPoints", amount = 5 },
    { type = "setNpcMood", npc_id = "b_a_receptionist", mood = "Happy" },
    { type = "showMessage", text = """
The robotic receptionist initially glances at you with the disdain of someone
who spends all day waiting on people who are waiting on someone else, but her
demeanor and even appearance immediately become pleasant when she sees the
invitation in your hand. She deftly takes it from you, scrutinizes it intently,
and slips it into a desktop document vaporizer.

She then hands you a laminated card on a lanyard. It appears blank, yet also
appears to show a variety of credentials at the same time.
""" },
    { type = "npcSays", npc_id = "b_a_receptionist", quote = """
Here is your visitor pass. Much of the facility will be inaccessible without
it, so treat it like a second towel.
""" },
]

[[triggers]]
name = "Gonk: Exchange Battery"
only_once = true
conditions = [
    { type = "giveToNpc", item_id = "empty_battery", npc_id = "gonk_droid" },
]
actions = [
    { type = "giveItemToPlayer", npc_id = "gonk_droid", item_id = "charged_battery" },
    { type = "setNpcMood", npc_id = "gonk_droid", mood = "Happy" },
    { type = "showMessage", text = """
Elated that you've given it such a large, empty battery to charge, the gonk
droid gives you a fully charged one, free of ... charge?
""" },
]

[[triggers]]
name = "Gonk: Give Photo Back"
only_once = true
conditions = [
    { type = "giveToNpc", item_id = "gonk_family_photo", npc_id = "gonk_droid" },
]
actions = [
    { type = "npcSays", npc_id = "gonk_droid", quote = "Gonk! Gonk." },
    { type = "showMessage", text = "The gonk totters and stands tall with pride." },
    { type = "restrictItem", item_id = "gonk_family_photo" },
    { type = "awardPoints", amount = 2 },
    { type = "addFlag", flag = "proud-papa-gonk" },
]

[[triggers]]
name = "Patio: Sunglasses Required"
only_once = false
conditions = [
    { type = "enter", room_id = "patio" },
    { type = "missingItem", item_id = "peril_sunglasses" },
]
actions = [
    { type = "pushPlayerTo", room_id = "restaurant" },
    { type = "showMessage", text = """
A blinding burst of light erupts from the swirling starfield, forcing you to
shield your eyes. With no protection, you're forcibly propelled back toward
the relative safety of the restaurant.
""" },
]

[[triggers]]
name = "Patio: Use Sunglasses"
only_once = false
conditions = [
    { type = "enter", room_id = "patio" },
    { type = "hasItem", item_id = "peril_sunglasses" },
]
actions = [{ type = "showMessage", text = """
Sensing the possible harm in eating a dessert a stone's throw away from the
explosions of all nearby stars, your peril-sensitive sunglasses flash nearly
completely opaque, allowing you to see without permanent damage to the retina.
""" }]

[[triggers]]
name = "Global: Cannot Discard No_Cake"
only_once = false
conditions = [{ type = "drop", item_id = "no_cake" }]
actions = [
    { type = "despawnItem", item_id = "no_cake" },
    { type = "spawnItemInInventory", item_id = "no_cake" },
    { type = "showMessage", text = """
Try as you might, you cannot rid yourself of the feeling of a missing a
promised dessert. The cake was a lie.
""" },
]

[[triggers]]
name = "Scrawled Note: Flag as Read"
only_once = true
conditions = [{ type = "useItem", item_id = "scrawled_note", ability = "read" }]
actions = [{ type = "addFlag", flag = "read-scrawled-note" }]

[[triggers]]
name = "Plaque 1: Clean With Towel"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "towel", target_id = "plaque_1", interaction = "clean" },
]
actions = [
    { type = "addFlag", flag = "cleaned-plaque-1" },
    { type = "awardPoints", amount = 3 },
    { type = "showMessage", text = "With some effort, you're able to wipe most of the grime off the plaque." },
]

[[triggers]]
name = "Plaque 1: Must Clean to Read"
only_once = false
conditions = [
    { type = "useItem", item_id = "plaque_1", ability = "read" },
    { type = "missingFlag", flag = "cleaned-plaque-1" },
]
actions = [
    { type = "denyRead", reason = "It's too grimy. You need something to wipe it off." },
    { type = "addFlag", flag = "tried-read-plaque-1" },
]

[[triggers]]
name = "Plaque 1: Read After Cleaning"
only_once = true
conditions = [
    { type = "useItem", item_id = "plaque_1", ability = "read" },
    { type = "hasFlag", flag = "cleaned-plaque-1" },
]
actions = [
    { type = "addFlag", flag = "read-plaque-1" },
    { type = "awardPoints", amount = 5 },
]

[[triggers]]
name = "Poetry-Panic: Acquired Elevator Keycard"
only_once = true
conditions = [{ type = "take", item_id = "elevator_keycard" }]
actions = [
    { type = "setNpcMood", npc_id = "b_a_receptionist", mood = "Bored" },
    { type = "addFlag", flag = "got-elevator-keycard" },
]

[[triggers]]
name = "Office: Acquire Lost and Found Key"
only_once = true
conditions = [
    { type = "enter", room_id = "b-a-office" },
    { type = "hasFlag", flag = "got-elevator-keycard" },
    { type = "withNpc", npc_id = "b_a_receptionist" },
]
actions = [
    { type = "giveItemToPlayer", npc_id = "b_a_receptionist", item_id = "lost_and_found_key" },
    { type = "showMessage", text = """
Seeing you return with the keycard, the receptionist looks around warily and
slips something into your hand, then looks directly at the lost and found box.
    """ },
    { type = "npcSays", npc_id = "b_a_receptionist", quote = """
Finally! A Candidate bright enough to get to that keycard. I guess I lost the
pool. Who'd have thought it'd be a primate?
""" },
    { type = "npcSays", npc_id = "b_a_receptionist", quote = """
(quietly) Use this before you head down to AA-3B.
""" },
]

[[triggers]]
name = "Office: Lost & Found Unlocked"
only_once = true
conditions = [{ type = "unlock", item_id = "lost_and_found_box" }]
actions = [
    { type = "awardPoints", amount = 5 },
    { type = "addFlag", flag = "lost-and-found-opened" },
]

# START FALLEN TREE TRIGGERS
[[triggers]]
name = "Two-Sheds-Landing: Cut Tree with Axe"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "lumberjack_axe", target_id = "fallen_tree", interaction = "cut" },
]
actions = [
    { type = "showMessage", text = "You swing the axe with practiced heft, chopping through the tree in a shower of splinters." },
    { type = "despawnItem", item_id = "fallen_tree" },
    { type = "addFlag", flag = "cleared-fallen-tree" },
    { type = "addFlag", flag = "chopped-fallen-tree" },
    { type = "awardPoints", amount = 5 },
]

[[triggers]]
name = "Two-Sheds-Landing: Burn Tree with Flamethrower"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "flamethrower", target_id = "fallen_tree", interaction = "burn" },
]
actions = [
    { type = "despawnItem", item_id = "fallen_tree" },
    { type = "despawnItem", item_id = "flamethrower" },
    { type = "addFlag", flag = "cleared-fallen-tree" },
    { type = "addFlag", flag = "burned-fallen-tree" },
    { type = "awardPoints", amount = 5 },
    { type = "showMessage", text = """
    You step back, aim, and squeeze the trigger... The device flares to life — and then
    catches fire *itself*. Panicking, you hurl it straight into the mass of limbs and
    branches. The fallen tree erupts into flame and, quite improbably, is reduced to
    ash in mere seconds.""" },
]

[[triggers]]
name = "Pluck Dental Floss"
only_once = true
conditions = [{ type = "take", item_id = "dental_floss" }]
actions = [
    { type = "showMessage", text = """
You pluck a strand of floss from the bush. It comes away easily — disturbingly so.
Minty. Strong. Too strong. You’re no botanist, but you’re pretty sure this shouldn’t
be growing out of a shrubbery.""" },
    { type = "awardPoints", amount = 3 },
]

[[triggers]]
name = "Loading Dock: Open Security Crate (Key)"
only_once = true
conditions = [{ type = "unlock", item_id = "security_crate" }]
actions = [
    { type = "spawnItemInContainer", item_id = "crowbar", container_id = "security_crate" },
    { type = "spawnItemInContainer", item_id = "security_log", container_id = "security_crate" },
    { type = "spawnItemInContainer", item_id = "glass_vial", container_id = "security_crate" },
    { type = "spawnItemInContainer", item_id = "initech_mug", container_id = "security_crate" },
    { type = "addFlag", flag = "unlocked-security-crate" },
    { type = "showMessage", text = """
The ear wax on the tip of the key eases it into the rusted lock, which snaps
open with a satisfying clunk.
""" },
]

[[triggers]]
name = "Loading Dock: Open Security Crate (Cut Wood)"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "lumberjack_axe", target_id = "security_crate", interaction = "cut" },
    { type = "missingFlag", flag = "unlocked-security-crate" },
]
actions = [
    { type = "despawnItem", item_id = "security_crate" },
    { type = "spawnItemCurrentRoom", item_id = "crowbar" },
    { type = "spawnItemCurrentRoom", item_id = "shattered_vial" },
    { type = "spawnItemCurrentRoom", item_id = "security_log" },
    { type = "spawnItemCurrentRoom", item_id = "initech_mug" },
    { type = "showMessage", text = """
You're surprised to hear yourself singing, "I'm a lumberjack, and I'm OK. I
sleep all night and I work all day!" -- as you chop the security locker into
splinters. There is a crowbar lying amongst the rubble.""" },
]

[[triggers]]
name = "Loading Dock: Open Security Crate (Break)"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "lumberjack_axe", target_id = "security_crate", interaction = "break" },
    { type = "missingFlag", flag = "unlocked-security-crate" },
]
actions = [
    { type = "despawnItem", item_id = "security_crate" },
    { type = "spawnItemCurrentRoom", item_id = "crowbar" },
    { type = "spawnItemCurrentRoom", item_id = "shattered_vial" },
    { type = "spawnItemCurrentRoom", item_id = "security_log" },
    { type = "spawnItemCurrentRoom", item_id = "initech_mug" },
    { type = "showMessage", text = """
With a few hefty blows using the blunt side of the axe head, you manage to
break the lock haft completely off of the security locker -- well after a few
misses had already caved in the lid and destroyed it, but you were having fun.
You can hardly have damaged the crowbar that was stored inside.""" },
]

[[triggers]]
name = "Loading Dock: Open Security Crate (Burn)"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "flamethrower", target_id = "security_crate", interaction = "burn" },
    { type = "missingFlag", flag = "unlocked-security-crate" },
]
actions = [
    { type = "despawnItem", item_id = "security_crate" },
    { type = "spawnItemCurrentRoom", item_id = "crowbar" },
    { type = "spawnItemCurrentRoom", item_id = "burned_security_log" },
    { type = "spawnItemCurrentRoom", item_id = "glass_vial" },
    { type = "spawnItemCurrentRoom", item_id = "initech_mug" },
    { type = "showMessage", text = """
Following the directions, you aim and slowly squeeze the Arson-Aid trigger.
The entire device catches fire. Panicking, you chuck it at the security
supply locker...

WHOOOOOMP! The locker, which you now realize may have been made from the solid
magnesium magnolia trees of Siwenna, goes up in a white hot flash -- taking
your eyebrows with it. Luckily, the crowbar that was stored inside only warped
a bit, but it's still quite usable.
""" },
]

[[triggers]]
name = "Got Crowbar"
only_once = true
conditions = [{ type = "take", item_id = "crowbar" }]
actions = [
    { type = "showMessage", text = """
You feel like Gordon Freeman now, and wonder if maybe Barney's on security here?
""" },
    { type = "showMessage", text = """
Then you wonder why you're thinking of Barney as a real person instead of a
character in a game. Wait, he was just a fiction, right? Come to think of it,
you feel a little unsure of reality, and it's worse the nearer you are to the
building.""" },
    { type = "addFlag", flag = "got-crowbar" },
    { type = "awardPoints", amount = 4 },
]

[[triggers]]
name = "Black Knight: Taking Sword Angers Knight"
only_once = false
conditions = [
    { type = "takeFromNpc", item_id = "dull_longsword", npc_id = "black_knight" },
]
actions = [
    { type = "setNpcMood", npc_id = "black_knight", mood = "Mad" },
    { type = "npcSays", npc_id = "black_knight", quote = "Hey! Give that back, you cowardly cur!" },
]


[[triggers]]
name = "Black Knight: Sharpened Sword"
only_once = true
conditions = [
    { type = "useItemOnItem", tool_id = "whetstone", target_id = "dull_longsword", interaction = "sharpen" },
]
actions = [
    { type = "despawnItem", item_id = "dull_longsword" },
    { type = "spawnItemInInventory", item_id = "keen_longsword" },
    { type = "showMessage", text = """
In almost no time, you hone the Black Knight's sword to a keen edge.
""" },
    { type = "addFlag", flag = "sword-sharpened" },
    { type = "awardPoints", amount = 3 },
]

[[triggers]]
name = "Black Knight: Happy When Keen Sword Returned"
only_once = true
conditions = [
    { type = "giveToNpc", item_id = "keen_longsword", npc_id = "black_knight" },
]
actions = [
    { type = "restrictItem", item_id = "keen_longsword" },
    { type = "addFlag", flag = "appeased-black-knight" },
    { type = "awardPoints", amount = 5 },
    { type = "setNpcMood", npc_id = "black_knight", mood = "Happy" },
    { type = "npcSays", npc_id = "black_knight", quote = """
Thank you, good Sir! For your kind deed, I swear on my sword that I shall
not cut you to bits with it. And you may pass wherever you like.""" },
]

[[triggers]]
name = "Black Knight: Angry, Kicks Player"
only_once = false
conditions = [
    { type = "withNpc", npc_id = "black_knight" },
    { type = "npcInMood", npc_id = "black_knight", mood = "Mad" },
]
actions = [
    { type = "showMessage", text = """
The Black Knight continues dodging about the room, occasionally trying to kick you in the shin.
""" },
    { type = "npcSaysRandom", npc_id = "black_knight" },
]

[[triggers]]
name = "Ambient: Woodland"
only_once = false
conditions = [
    { type = "ambient", spinner = "ambientWoodland", room_ids = [
        "high-ridge",
        "parish-landing",
        "two-sheds-landing",
        "two-sheds",
        "guard-post",
    ] },
]
actions = []

[[triggers]]
name = "Ambient: Near AA-3B"
only_once = false
conditions = [
    { type = "ambient", spinner = "ambientAA3B", room_ids = [
        "lift-sublevel-1",
        "sublevel-1-entrance",
        "corridor-north",
        "corridor-south",
        "observation-room",
        "security-station",
        "med-bay",
    ] },
]
actions = []

[[triggers]]
name = "Ambient: AA Building Main Floor"
only_once = false
conditions = [
    { type = "ambient", spinner = "ambientInterior", room_ids = [
        "main-lobby",
        "b-a-office",
        "restaurant",
        "patio",
        "lift-bank-main",
        "lounge",
        "vip-bathroom",
    ] },
]
actions = []

[[triggers]]
name = "Vogon Poetry: Nausea & Vomiting Upon Reading"
only_once = false
conditions = [
    { type = "useItem", item_id = "vogon_poetry_book", ability = "read" },
]
actions = [
    { type = "showMessage", text = "You get as far as the first poem before the vomiting begins..." },
    { type = "addFlag", flag = "read-vogon-poetry" },
    { type = "addFlag", flag = "status:nauseated" },
    { type = "awardPoints", amount = -1 },
]

[[triggers]]
name = "Status: Nauseated"
only_once = false
conditions = [{ type = "hasFlag", flag = "status:nauseated" }]
actions = [{ type = "spinnerMessage", spinner = "nauseated" }]

[[triggers]]
name = "Receptionist: Comment if Poetry Read"
only_once = true
conditions = [
    { type = "withNpc", npc_id = "b_a_receptionist" },
    { type = "hasFlag", flag = "read-vogon-poetry" },
]
actions = [{ type = "npcSays", npc_id = "b_a_receptionist", quote = """
You look ill. You didn't read that poetry book, did you? That won't
look good on your evaluation.""" }]

# ------ EMH DIALOGUE TRIGGERS -------
[[triggers]]
name = "EMH: Cure Vogon Poetry"
only_once = true
conditions = [
    { type = "talkToNpc", npc_id = "emh" },
    { type = "hasFlag", flag = "read-vogon-poetry" },
    { type = "hasFlag", flag = "status:nauseated" },
]
actions = [
    { type = "addFlag", flag = "cured-vogon-poetry" },
    { type = "removeFlag", flag = "status:nauseated" },
    { type = "awardPoints", amount = 3 },
    { type = "npcSays", npc_id = "emh", quote = "You poor fool, you look horrible. You've been reading Vogon poetry, hmmm? Here, this should help." },
    { type = "showMessage", text = "The EMH gives you a shot in the arm, and your lingering nausea subsides." },
]
