# Generated by amble_script from /home/dave/Code/rust/amble/amble_script/data/Amble (62 files)
# Do not edit: this file is compiled from DSL.
# Source Hash (fnv64): 0c4d4c384821f65b

# trigger [Ambient] Woodland (source line 16)
[[triggers]]
name = "[Ambient] Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "high-ridge" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger [Ambient] Woodland (source line 16)
[[triggers]]
name = "[Ambient] Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "parish-landing" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger [Ambient] Woodland (source line 16)
[[triggers]]
name = "[Ambient] Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "two-sheds-landing" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger [Ambient] Woodland (source line 16)
[[triggers]]
name = "[Ambient] Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "two-sheds" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger [Ambient] Woodland (source line 16)
[[triggers]]
name = "[Ambient] Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "guard-post" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lift-sublevel-1" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "sublevel-1-entrance" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "corridor-north" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "corridor-south" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "observation-room" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "security-station" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "med-bay" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Near AA-3B (source line 48)
[[triggers]]
name = "[Ambient] Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "monolith-room" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "main-lobby" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "b-a-office" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "restaurant" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "patio" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lift-bank-main" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lounge" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Main Floor (source line 84)
[[triggers]]
name = "[Ambient] Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "vip-bathroom" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger [Ambient] Snowfield (source line 117)
[[triggers]]
name = "[Ambient] Snowfield"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "snowfield" }]
actions = [{ type = "spinnerMessage", spinner = "ambientSnowfield" }]
# trigger [Ambient] Snowfield (source line 117)
[[triggers]]
name = "[Ambient] Snowfield"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "snow-camp" }]
actions = [{ type = "spinnerMessage", spinner = "ambientSnowfield" }]
# trigger [Ambient] Elevator Muzak (source line 133)
[[triggers]]
name = "[Ambient] Elevator Muzak"
conditions = [{ type = "chance", one_in = 3.3333333333333335 }, { type = "inRoom", room_id = "lift-main" }]
actions = [{ type = "spinnerMessage", spinner = "muzak" }]
# trigger [Ambient] Elevator Muzak (source line 133)
[[triggers]]
name = "[Ambient] Elevator Muzak"
conditions = [{ type = "chance", one_in = 3.3333333333333335 }, { type = "inRoom", room_id = "lift-sublevel-1" }]
actions = [{ type = "spinnerMessage", spinner = "muzak" }]
# trigger [Aperture-Lab] FoamSafe Misfire (source line 43)
[[triggers]]
name = "[Aperture-Lab] FoamSafe Misfire"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "extinguish", target_id = "burnt_invitation", tool_id = "foamsafe_x17" }]
actions = [{ type = "despawnItem", item_id = "foamsafe_x17" }, { type = "showMessage", text = "You spray the foam onto the burning invitation. Instead of dousing the flame, the foam flares up into a spectacular fireball!" }, { type = "addFlag", flag = { type = "sequence", name = "foam-fire-in-lab", end = 3 } }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "The foam fire accelerates, as it turns into a hissing, popping ball of goo spitting off little globs of flaming napalm!" }, { type = "advanceFlag", flag = "foam-fire-in-lab" }], note = "foam fire starts" }, { type = "scheduleIn", turns_ahead = 3, actions = [{ type = "showMessage", text = "The fire alarm begins to wail as the flames spread through the lab and the sprinklers turn on, pushing you back toward the portal to escape!" }, { type = "advanceFlag", flag = "foam-fire-in-lab" }, { type = "addFlag", flag = { type = "simple", name = "lab-fire-raging" } }, { type = "pushPlayerTo", room_id = "portal-room" }], note = "foam fire spreads" }, { type = "scheduleIn", turns_ahead = 8, actions = [{ type = "showMessage", text = "The alarms stop. The fire in the Aperture lab has been extinguised. Hopefully nobody saw you light it, you monster." }, { type = "advanceFlag", flag = "foam-fire-in-lab" }, { type = "removeFlag", flag = "lab-fire-raging" }, { type = "awardPoints", amount = 5 }], note = "foam fire out" }]
# trigger [Aperture-Lab] Can't Enter While Lab On Fire (source line 65)
[[triggers]]
name = "[Aperture-Lab] Can't Enter While Lab On Fire"
conditions = [{ type = "enter", room_id = "aperture-lab" }, { type = "flagInProgress", flag = "foam-fire-in-lab" }]
actions = [{ type = "showMessage", text = "You try to get back into the lab, but the flames and oily smoke from the foam fire drive you back through the portal within seconds." }, { type = "pushPlayerTo", room_id = "portal-room" }]
# trigger [CMOT] Buy a Sausage-inna-Bun (source line 50)
[[triggers]]
name = "[CMOT] Buy a Sausage-inna-Bun"
only_once = true
conditions = [{ type = "giveToNpc", item_id = "am_dollar", npc_id = "cmot_dibbler" }]
actions = [{ type = "restrictItem", item_id = "am_dollar" }, { type = "npcSays", npc_id = "cmot_dibbler", quote = "An Ankh-Morpork dollar! Not sure where you found that around here. Sorry, er, I seem to have no change to give ya. Here's my finest, world-famous (and patented) Sausage-Inna-Bun." }, { type = "setNpcState", npc_id = "cmot_dibbler", state = "happy" }, { type = "giveItemToPlayer", npc_id = "cmot_dibbler", item_id = "sausage-inna-bun" }, { type = "awardPoints", amount = 5 }]
# trigger [CMOT] Trade Mug For Gizmo (source line 59)
[[triggers]]
name = "[CMOT] Trade Mug For Gizmo"
only_once = true
conditions = [{ type = "giveToNpc", item_id = "initech_mug", npc_id = "cmot_dibbler" }]
actions = [{ type = "npcSays", npc_id = "cmot_dibbler", quote = "Whoa! Me favorite mug from the lads down at Initech?! Where did it turn up? Ah -- no matter, really. I still haven't figured out how to open the bloody thing, making it somewhat useless. Here -- seems fitting I give you this useless gizmo as a more-than-fair trade." }, { type = "giveItemToPlayer", npc_id = "cmot_dibbler", item_id = "hal_module_3" }, { type = "awardPoints", amount = 5 }]
# trigger [Gonk Droid] Happy When Family Photo Inspected (source line 46)
[[triggers]]
name = "[Gonk Droid] Happy When Family Photo Inspected"
only_once = true
conditions = [{ type = "lookAt", item_id = "gonk_family_photo" }]
actions = [{ type = "npcSays", npc_id = "gonk_droid", quote = "GONK gonk!" }, { type = "showMessage", text = "The gonk droid totters with pride as you view its family photo." }, { type = "awardPoints", amount = 2 }, { type = "addFlag", flag = { type = "simple", name = "made-gonk-proud" } }]
# trigger [Office] Receptionist Unhelpful if No Pass (source line 31)
[[triggers]]
name = "[Office] Receptionist Unhelpful if No Pass"
conditions = [{ type = "withNpc", npc_id = "b_a_receptionist" }, { type = "missingFlag", flag = "got-visitor-pass" }, { type = "missingFlag", flag = "got-elevator-keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "normal" }]
# trigger [Office] Receptionist Helpful Once Pass Acquired (source line 37)
[[triggers]]
name = "[Office] Receptionist Helpful Once Pass Acquired"
conditions = [{ type = "withNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "got-visitor-pass" }, { type = "missingFlag", flag = "got-elevator-keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "happy" }]
# trigger [Office] Exchange Invitation for Visitor Pass (source line 43)
[[triggers]]
name = "[Office] Exchange Invitation for Visitor Pass"
conditions = [{ type = "giveToNpc", item_id = "invitation", npc_id = "b_a_receptionist" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-visitor-pass" } }, { type = "despawnItem", item_id = "invitation" }, { type = "spawnItemInInventory", item_id = "visitor_pass" }, { type = "awardPoints", amount = 5 }, { type = "setNpcState", npc_id = "b_a_receptionist", state = "happy" }, { type = "showMessage", text = """
The robotic receptionist initially glanced at you with the disdain of someone who spends all day waiting on people who are waiting on someone else, but her demeanor and even appearance immediately became welcoming once she noticed the invitation in your hand. Deftly, she takes it from you, scrutinizes it intently, and slips it into a desktop document vaporizer.

She then hands you a laminated card on a lanyard. It appears blank, yet also appears to show a variety of credentials at the same time.""" }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "Here is your visitor pass. Much of the facility will be inaccessible without it, so treat it like a second towel." }]
# trigger [Office] Receptionist Comment (Read Poetry) (source line 53)
[[triggers]]
name = "[Office] Receptionist Comment (Read Poetry)"
only_once = true
conditions = [{ type = "enter", room_id = "b-a-office" }, { type = "withNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "read-vogon-poetry" }, { type = "hasFlag", flag = "status:nauseated" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "You look ill. You didn't read that poetry book, did you? That won't look good on your evaluation. The Emergency Medical Hologram on level AA-3 may be able to help." }]
# trigger [Office] Receptionist Comment (Broken Emitter Found) (source line 60)
[[triggers]]
name = "[Office] Receptionist Comment (Broken Emitter Found)"
conditions = [{ type = "enter", room_id = "b-a-office" }, { type = "withNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "mobilize-emh#0" }]
actions = [{ type = "npcSays", npc_id = "b_a_receptionist", quote = "I hear the EMH lost his emitter again. One has been turned into the Lost and Found, but I'm not sure how much good it will do you. Or him." }]
# trigger [Office] Receptionist Comment (Sausage Breath) (source line 67)
[[triggers]]
name = "[Office] Receptionist Comment (Sausage Breath)"
conditions = [{ type = "talkToNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "ate-sausage" }]
actions = [{ type = "npcSays", npc_id = "b_a_receptionist", quote = "My word, the smell coming from your -- mouth? -- is pathological. I can't stand to talk to you. You must see the EMH down on the sublevel." }]
# trigger [Poetry-Panic] Acquired Elevator Keycard (source line 49)
[[triggers]]
name = "[Poetry-Panic] Acquired Elevator Keycard"
only_once = true
conditions = [{ type = "take", item_id = "elevator_keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "bored" }, { type = "addFlag", flag = { type = "simple", name = "got-elevator-keycard" } }]
# trigger [Office] Insert Poems to Open Panic Room (source line 54)
[[triggers]]
name = "[Office] Insert Poems to Open Panic Room"
only_once = true
conditions = [{ type = "insert", item_id = "vogon_poetry_book", container_id = "poetry_performer" }]
actions = [{ type = "awardPoints", amount = 5 }, { type = "despawnItem", item_id = "vogon_poetry_book" }, { type = "addFlag", flag = { type = "simple", name = "panic-room-open" } }, { type = "revealExit", exit_from = "b-a-office", exit_to = "poetry-panic", direction = "west" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA announcement: Vogon poetry has been detected in the building. If you are experiencing nausea, go to med bay for assistance." }, { type = "showMessage", text = """
The machine begins to whine at a high pitch and gives off a noxious odor of burning hair. A klaxon blares and the display warns:

            ⚠️ VOGON INPUT DETECTED - POETRY PANIC ROOM UNLOCKED ⚠️
               ☣ VAPORIZING VOGON INPUT - AVOID TOXIC FUMES ☣

The whiteboard on the west wall slides to the side, revealing a vault-like door.""" }]
# trigger [Aperture-Lab] Printer Burns Paper (source line 38)
[[triggers]]
name = "[Aperture-Lab] Printer Burns Paper"
conditions = [{ type = "useItem", item_id = "lab_printer", ability = "turnOn" }, { type = "containerHasItem", container_id = "lab_printer", item_id = "printer_paper" }]
actions = [{ type = "despawnItem", item_id = "printer_paper" }, { type = "addFlag", flag = { type = "simple", name = "burned-invitation" } }, { type = "spawnItemInRoom", item_id = "burnt_invitation", room_id = "aperture-lab" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "An annoyed voice on the PA: ATTENTION Staff - do NOT use regular copy paper in the lab PlasmaJet printer, or we will be shut down again -- by order of FEMA, PETA, the ATF, FBI, and our HOA." }, { type = "showMessage", text = "The paper ignites in a flash, and the PlasmaJet spits the flaming fragments of a document on the floor at your feet." }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "A nearby smoke detector alarms briefly, the quits with an exasperated sigh when it sees you near the printer, surrounded by smoldering confetti." }] }]
# trigger [Aperture-Lab] Print Invitation on Asbestos (source line 52)
[[triggers]]
name = "[Aperture-Lab] Print Invitation on Asbestos"
only_once = true
conditions = [{ type = "useItem", item_id = "lab_printer", ability = "turnOn" }, { type = "containerHasItem", container_id = "lab_printer", item_id = "asbestos_sheet" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "invitation-sans-ignition" } }, { type = "awardPoints", amount = 10 }, { type = "despawnItem", item_id = "asbestos_sheet" }, { type = "showMessage", text = "The PlasmaJet emits a blinding flash of light, leaving a printer-shaped purple blob in your visual field and blinding you for a few moments." }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "spawnItemInRoom", item_id = "invitation", room_id = "aperture-lab" }, { type = "showMessage", text = "Your vision begins to clear, and you see an engraved invitation on the floor. It glows slightly, and waves of heat warp the air around it." }], note = "blindness clears" }]
# trigger [Aperture-Lab] Insulate With Towel (source line 66)
[[triggers]]
name = "[Aperture-Lab] Insulate With Towel"
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "invitation", tool_id = "towel" }]
actions = [{ type = "showMessage", text = "You wrap your towel around the still-piping-hot invitation to grasp it, suffering only minor burns in the process." }]
# trigger [Aperture-Lab] Handle/Take Invitation with Towel (source line 71)
[[triggers]]
name = "[Aperture-Lab] Handle/Take Invitation with Towel"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "invitation", action = "handle" }]
actions = [{ type = "despawnItem", item_id = "invitation" }, { type = "spawnItemInInventory", item_id = "invitation" }, { type = "addFlag", flag = { type = "simple", name = "got-invitation" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "Using your towel as insulation, you're able to wrangle the still-hot invitation into your pack." }]
# trigger [Aperture-Lab] Drop Invitation Without Insulation (source line 80)
[[triggers]]
name = "[Aperture-Lab] Drop Invitation Without Insulation"
conditions = [{ type = "take", item_id = "invitation" }]
actions = [{ type = "replaceDropItem", old_sym = "invitation", new_sym = "invitation" }, { type = "showMessage", text = "You burn your fingers and drop the invitation on the floor. It emits a reddish glow, and shimmers from the radiating heat." }]
# trigger [Gonk Droid] Battery Exchange (source line 29)
[[triggers]]
name = "[Gonk Droid] Battery Exchange"
only_once = true
note = "necessary step in portal gun puzzle"
conditions = [{ type = "giveToNpc", item_id = "empty_battery", npc_id = "gonk_droid" }]
actions = [{ type = "awardPoints", amount = 2 }, { type = "giveItemToPlayer", npc_id = "gonk_droid", item_id = "charged_battery" }, { type = "setNpcState", npc_id = "gonk_droid", state = "happy" }, { type = "showMessage", text = "Elated that you've given it such a large, empty battery to charge, the gonk droid gives you a fully charged one, free of ... charge?" }]
# trigger [Portal-Room] Gun Opened (source line 38)
[[triggers]]
name = "[Portal-Room] Gun Opened"
only_once = true
conditions = [{ type = "open", item_id = "portal_gun" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "portal-gun-opened" } }]
# trigger [Portal-Room] Gun Powered (source line 44)
[[triggers]]
name = "[Portal-Room] Gun Powered"
conditions = [{ type = "insert", item_id = "charged_battery", container_id = "portal_gun" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "portal-gun-powered" } }, { type = "awardPoints", amount = 3 }, { type = "restrictItem", item_id = "charged_battery" }, { type = "setItemDescription", item_sym = "portal_gun", text = "A black and white Portal gun sits bolted to its pedestal, aimed at a target on the wall. A fused battery juts from the compartment and the power indicator glows steadily green." }, { type = "showMessage", text = "Arcing wildly as you insert it, the fully charged 20 KV battery fuses itself to the contacts inside the portal gun -- when then emits a quick high-pitched whine. The POWER indicator lights a steady green." }]
# trigger [Portal-Room] Gun Fired / Open Portal (source line 53)
[[triggers]]
name = "[Portal-Room] Gun Fired / Open Portal"
only_once = true
conditions = [{ type = "useItem", item_id = "portal_gun", ability = "turnOn" }, { type = "hasFlag", flag = "portal-gun-powered" }]
actions = [{ type = "revealExit", exit_from = "portal-room", exit_to = "aperture-lab", direction = "portal" }, { type = "addFlag", flag = { type = "simple", name = "portal-opened" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "A loud SQUIP! comes from the gun when you turn it on. The wall in front of it sizzles for a moment, and then a crackling oval blue portal expands on the wall to reveal a laboratory space on the other side." }]
# trigger [Portal-Room] Tried Gun Without Power (source line 63)
[[triggers]]
name = "[Portal-Room] Tried Gun Without Power"
conditions = [{ type = "useItem", item_id = "portal_gun", ability = "turnOn" }, { type = "missingFlag", flag = "portal-gun-powered" }]
actions = [{ type = "showMessage", text = "You attempt to turn the portal gun on, but the POWER light briefly flashes red, then goes dark. Nothing else happens." }]
# trigger [Office] Open Poetry Performer (source line 72)
[[triggers]]
name = "[Office] Open Poetry Performer"
conditions = [{ type = "open", item_id = "poetry_performer" }]
actions = [{ type = "showMessage", text = """
The machine clicks on and hums. A flashing red light warns:
            ⚠️ NOT FOR USE WITH VOGON POETRY ⚠️""" }]
# trigger [Office] Gifted Lost and Found Key (source line 77)
[[triggers]]
name = "[Office] Gifted Lost and Found Key"
only_once = true
conditions = [{ type = "enter", room_id = "b-a-office" }, { type = "hasFlag", flag = "got-elevator-keycard" }, { type = "withNpc", npc_id = "b_a_receptionist" }]
actions = [{ type = "giveItemToPlayer", npc_id = "b_a_receptionist", item_id = "lost_and_found_key" }, { type = "showMessage", text = "Seeing you return with the keycard, the receptionist looks around warily and slips something into your hand, then looks directly at the lost and found box." }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "Finally! A Candidate bright enough to get to that keycard. I guess I lost the pool. Who'd have thought it'd be a primate?" }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "(*whispers*) Use this before you head down to AA-3B." }]
# trigger [Office] Lost and Found Unlocked (source line 87)
[[triggers]]
name = "[Office] Lost and Found Unlocked"
only_once = true
conditions = [{ type = "unlock", item_id = "lost_and_found_box" }]
actions = [{ type = "awardPoints", amount = 3 }, { type = "addFlag", flag = { type = "simple", name = "lost-and-found-opened" } }, { type = "setItemDescription", item_sym = "lost_and_found_box", text = "A sturdy metal lockbox marked 'Lost and Found'. Its lid is cracked slightly open." }]
# trigger [Lift-Bank-Main] Keycard Activates Elevator (source line 26)
[[triggers]]
name = "[Lift-Bank-Main] Keycard Activates Elevator"
conditions = [{ type = "enter", room_id = "lift-bank-main" }, { type = "hasItem", item_id = "elevator_keycard" }]
actions = [{ type = "showMessage", text = "The keycard in your pack chirps twice as you approach the proximity reader on the wall, which responds with a happy melody." }]
# trigger [Lift-Bank-Main] Point Award On First Activation (source line 32)
[[triggers]]
name = "[Lift-Bank-Main] Point Award On First Activation"
only_once = true
conditions = [{ type = "enter", room_id = "lift-bank-main" }, { type = "hasItem", item_id = "elevator_keycard" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "elevator-activated" } }, { type = "showMessage", text = "The main lift lights up, and Muzak plays over a tinny speaker inside. In horror, you realize: It's Porcupine Tree's 'The Sound of Muzak' -- the Muzak version." }, { type = "awardPoints", amount = 3 }]
# trigger [Lift Main] Pressed AA-3 Button (source line 36)
[[triggers]]
name = "[Lift Main] Pressed AA-3 Button"
conditions = [{ type = "touch", item_id = "aa_3_button_main" }, { type = "hasItem", item_id = "elevator_keycard" }, { type = "hasItem", item_id = "visitor_pass" }]
actions = [{ type = "pushPlayerTo", room_id = "lift-sublevel-1" }, { type = "showMessage", text = "The elevator giggles and lurches gleefully downward, nearly taking you off your feet. Just as your spleen is becoming accustomed to sharing space with your tonsils, a sudden deceleration throws it all the way down into your pelvis and you come to an abrupt stop at the deep sublevel entrance." }]
# trigger [Lift Main] Pressed AA-3 Button (source line 36)
[[triggers]]
name = "[Lift Main] Pressed AA-3 Button"
conditions = [{ type = "touch", item_id = "aa_3_button_main" }, { type = "missingItem", item_id = "elevator_keycard" }]
actions = [{ type = "showMessage", text = "The elevator seems truly upset when it tells you it can't take you down to the sublevel, and laments that its programming won't allow it to move for anyone without a proximity keycard. A valid visitor pass is also required to access the AA-3 sublevel." }]
# trigger [Lift Main] Pressed AA-3 Button (source line 36)
[[triggers]]
name = "[Lift Main] Pressed AA-3 Button"
conditions = [{ type = "touch", item_id = "aa_3_button_main" }, { type = "missingItem", item_id = "visitor_pass" }]
actions = [{ type = "showMessage", text = "The elevator seems truly upset when it tells you it can't take you down to the sublevel, and laments that its programming won't allow it to move for anyone without a proximity keycard. A valid visitor pass is also required to access the AA-3 sublevel." }]
# trigger [Lift Main] (source line 46)
[[triggers]]
name = "[Lift Main]"
conditions = [{ type = "touch", item_id = "main_button_main" }]
actions = [{ type = "showMessage", text = "With something between a yawn and a sigh, the elevator reminds you that you are already on the main floor, then closes and opens the doors for emphasis" }]
# trigger [Lounge] Rug Taken / Reveal Trapdoor (source line 58)
[[triggers]]
name = "[Lounge] Rug Taken / Reveal Trapdoor"
only_once = true
conditions = [{ type = "take", item_id = "lebowski_rug" }]
actions = [{ type = "revealExit", exit_from = "lounge", exit_to = "portal-room", direction = "down" }, { type = "addFlag", flag = { type = "simple", name = "found-portal-room" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "Light shines around the edges of a trap door revealed in the floor when you remove the rug. The room no longer seems tied together." }]
# trigger [Lounge] Rug Burned Away (source line 65)
[[triggers]]
name = "[Lounge] Rug Burned Away"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "lebowski_rug", action = "burn" }]
actions = [{ type = "despawnItem", item_id = "lebowski_rug" }, { type = "revealExit", exit_from = "lounge", exit_to = "portal-room", direction = "down" }, { type = "addFlag", flag = { type = "simple", name = "found-portal-room" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "When the acrid smoke clears and your eyes stop burning, you can make out a trap door revealed in the floor where the rug used to be." }]
# trigger [Lounge] Brew Coffee (source line 73)
[[triggers]]
name = "[Lounge] Brew Coffee"
only_once = true
conditions = [{ type = "useItem", item_id = "coffee_machine", ability = "turnOn" }]
actions = [{ type = "showMessage", text = "The coffee machine hums to life and begins its brewing cycle. A timer shows 3 minutes remaining..." }, { type = "setItemDescription", item_sym = "coffee_machine", text = "A single serve drip coffee machine, which apparently takes quite a while to finish brewing a cup one drip at a time..." }, { type = "scheduleIn", turns_ahead = 3, actions = [{ type = "setItemDescription", item_sym = "coffee_machine", text = "A single serve, drip coffee maker. The brew cycle is complete and the grounds have already been used." }, { type = "showMessage", text = "♪ BEEP BEEP BEEP! ♪ The coffee machine chimes cheerfully. The rich aroma of freshly brewed coffee fills the air." }, { type = "spawnItemInRoom", item_id = "hot_coffee", room_id = "lounge" }, { type = "addFlag", flag = { type = "simple", name = "coffee-brewed" } }, { type = "awardPoints", amount = 2 }], note = "coffee done brewing" }]
# trigger [Lounge] Coffee Taken (source line 87)
[[triggers]]
name = "[Lounge] Coffee Taken"
conditions = [{ type = "take", item_id = "hot_coffee" }]
actions = [{ type = "removeFlag", flag = "coffee-brewed" }]
# trigger Eat a Fortune Cookie (source line 66)
[[triggers]]
name = "Eat a Fortune Cookie"
note = "player gets random different fortunes each time from the 'fortunes' spinner"
conditions = [{ type = "ingest", item_sym = "fortune_cookies_of_doom", mode = "eat" }]
actions = [{ type = "showMessage", text = "You dare to eat a Fortune Cookie of Doom..." }, { type = "awardPoints", amount = 1 }, { type = "spinnerMessage", spinner = "fortunes" }]
# trigger [Main-Lobby] Security Reminder (source line 165)
[[triggers]]
name = "[Main-Lobby] Security Reminder"
only_once = true
conditions = [{ type = "enter", room_id = "main-lobby" }]
actions = [{ type = "scheduleInIf", turns_ahead = 3, condition = { type = "inRoom", room_id = "main-lobby" }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "A chime echoes through the lobby. \"Candidates: Please do not loiter in the lobby,\" intones an overhead voice." }, { type = "awardPoints", amount = -1 }], note = "lobby loitering reminder" }]
# trigger [Main-Lobby] HAL Module/Drop Tweezers In Crevice (source line 175)
[[triggers]]
name = "[Main-Lobby] HAL Module/Drop Tweezers In Crevice"
only_once = true
note = "may occur during vending machine / HAL module 2 sequence"
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "hal_module_2_crevice", tool_id = "zircon_tweezers" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "The glint of the zircon-encrusted tweezers is truly something to behold, but the tweezers are too short to reach the memory module. In fact, in trying to reach that far into the crack with them, the tweezers slip from your fingers and fall into the crevice too." }, { type = "replaceDropItem", old_sym = "zircon_tweezers", new_sym = "zircon_tweezers_crevice" }, { type = "addFlag", flag = { type = "simple", name = "lost-tweezers" } }, { type = "awardPoints", amount = -2 }]
# trigger [Main-Lobby] Recover Tweezers (source line 187)
[[triggers]]
name = "[Main-Lobby] Recover Tweezers"
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "zircon_tweezers_crevice", tool_id = "fishing_line" }]
actions = [{ type = "showMessage", text = "After a dozen tries and venting by beating the vending machine with the crowbar some more, you are able to fish your prized zircon-encrusted tweezers back out of the crevice." }, { type = "despawnItem", item_id = "zircon_tweezers_crevice" }, { type = "spawnItemInInventory", item_id = "zircon_tweezers" }, { type = "addFlag", flag = { type = "simple", name = "recovered-tweezers" } }, { type = "awardPoints", amount = 3 }]
# trigger Modify Patio: Sunglasses On (source line 18)
[[triggers]]
name = "Modify Patio: Sunglasses On"
conditions = [{ type = "take", item_id = "peril_sunglasses" }]
actions = [{ type = "modifyRoom", room_sym = "patio", patch = { name = "Restaurant Patio", desc = "The patio overlooks nothing in particular—just an endless starfield gently swirling beyond a transparent force field. A few metal tables are bolted to the floor, and one of them has a half-empty cocktail glass slowly un-drinking itself. A sign near the edge reads: 'No Leaning Beyond This Point. You have been warned.'" } }]
# trigger Modify Patio: Sunglasses Off (source line 24)
[[triggers]]
name = "Modify Patio: Sunglasses Off"
conditions = [{ type = "drop", item_id = "peril_sunglasses" }]
actions = [{ type = "modifyRoom", room_sym = "patio", patch = { name = "BLINDING GLARE", desc = "You see nothing at all. The pure white light here is direct-sunlight bright and seems to come from all directions, forcing you to shield your eyes with your arm and flee." } }]
# trigger [Plaque 3] Read the Plaque (source line 61)
[[triggers]]
name = "[Plaque 3] Read the Plaque"
only_once = true
conditions = [{ type = "useItem", item_id = "plaque_3", ability = "read" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-plaque-3" } }, { type = "awardPoints", amount = 10 }]
# trigger [Patio] Sunglasses Required (source line 67)
[[triggers]]
name = "[Patio] Sunglasses Required"
conditions = [{ type = "enter", room_id = "patio" }, { type = "missingItem", item_id = "peril_sunglasses" }]
actions = [{ type = "pushPlayerTo", room_id = "restaurant" }, { type = "showMessage", text = "A blinding burst of light erupts from the swirling starfield, forcing you to shield your eyes. With no protection, you're driven back into the relative safety of the restaurant." }]
# trigger [Patio] Sunglasses Required (source line 67)
[[triggers]]
name = "[Patio] Sunglasses Required"
conditions = [{ type = "enter", room_id = "patio" }, { type = "hasItem", item_id = "peril_sunglasses" }]
actions = [{ type = "showMessage", text = "Sensing the possible harm in eating a dessert a stone's throw away from the explosions of all nearby stars, your peril-sensitive sunglasses flash nearly completely opaque, allowing you to see without permanent damage to the retina as the galaxies outside continue to erupt." }]
# trigger [Patio] Award Points Getting In (source line 77)
[[triggers]]
name = "[Patio] Award Points Getting In"
only_once = true
note = "separate one-off trigger to award first time getting in"
conditions = [{ type = "enter", room_id = "patio" }, { type = "hasItem", item_id = "peril_sunglasses" }]
actions = [{ type = "awardPoints", amount = 2 }]
# trigger [Stargate] Press Woodland Button (source line 40)
[[triggers]]
name = "[Stargate] Press Woodland Button"
note = "open/move the Stargate connection to Parish Landing (only if plaque-1 read)"
conditions = [{ type = "touch", item_id = "woodland_button" }, { type = "hasFlag", flag = "read-plaque-1" }]
actions = [{ type = "showMessage", text = "With a great whooshing like the flush of a titan's toilet, the Stargate opens a new connection. You hear singing birds and the occasional screech coming through the opening." }, { type = "modifyRoom", room_sym = "stargate-room", patch = { desc = "A hangar-size concrete room, connected to the Aperture lab through a huge, round vault door. The Stargate is filled with a shimmering energy, from which you hear whispering sound and birdsong. Occasionally, a bird flies out of the gate and circles it, but -- finding nowhere to land -- flies back in.", remove_exits = ["ice-pit", "patio"], add_exits = [{ direction = "through the stargate", to = "parish-landing" }] } }, { type = "addFlag", flag = { type = "simple", name = "woodland-gate-open" } }, { type = "modifyRoom", room_sym = "parish-landing", patch = { add_exits = [{ direction = "through the stargate", to = "stargate-room" }] } }, { type = "removeFlag", flag = "snowfield-gate-open" }, { type = "modifyRoom", room_sym = "ice-pit", patch = { remove_exits = ["stargate-room"] } }, { type = "removeFlag", flag = "patio-gate-open" }, { type = "modifyRoom", room_sym = "patio", patch = { remove_exits = ["stargate-room"] } }]
# trigger [Stargate] Press Woodland Button (source line 40)
[[triggers]]
name = "[Stargate] Press Woodland Button"
note = "open/move the Stargate connection to Parish Landing (only if plaque-1 read)"
conditions = [{ type = "touch", item_id = "woodland_button" }, { type = "missingFlag", flag = "read-plaque-1" }]
actions = [{ type = "showMessage", text = "The tree button is already down as far as it can go; you can't press it." }]
# trigger [Stargate] Press Snowfield Button (source line 86)
[[triggers]]
name = "[Stargate] Press Snowfield Button"
note = "open/move the Stargate connection to Ice Pit (only if plaque 2 read)"
conditions = [{ type = "touch", item_id = "snowfield_button" }, { type = "hasFlag", flag = "read-plaque-2" }]
actions = [{ type = "showMessage", text = "With a great whooshing like the flush of a titan's toilet, the Stargate opens a new connection. You are chilled by the frigid air pouring through the opening." }, { type = "modifyRoom", room_sym = "stargate-room", patch = { desc = "A chilly, hangar-size concrete room, connected to the Aperture lab through a huge, round vault door. The Stargate is filled with a shimmering energy, from which you hear howling wind. Occasionally, another unearthly howl (Zomby Woof?) joins in.", remove_exits = ["parish-landing", "patio"], add_exits = [{ direction = "through the stargate", to = "ice-pit" }] } }, { type = "removeFlag", flag = "woodland-gate-open" }, { type = "modifyRoom", room_sym = "parish-landing", patch = { remove_exits = ["stargate-room"] } }, { type = "addFlag", flag = { type = "simple", name = "snowfield-gate-open" } }, { type = "modifyRoom", room_sym = "ice-pit", patch = { add_exits = [{ direction = "through the stargate", to = "stargate-room" }] } }, { type = "removeFlag", flag = "patio-gate-open" }, { type = "modifyRoom", room_sym = "patio", patch = { remove_exits = ["stargate-room"] } }]
# trigger [Stargate] Press Snowfield Button (source line 86)
[[triggers]]
name = "[Stargate] Press Snowfield Button"
note = "open/move the Stargate connection to Ice Pit (only if plaque 2 read)"
conditions = [{ type = "touch", item_id = "snowfield_button" }, { type = "missingFlag", flag = "read-plaque-2" }]
actions = [{ type = "showMessage", text = "The snowflake button is sunken; you can't push it down any farther." }]
# trigger [Stargate] Press Patio Button (source line 134)
[[triggers]]
name = "[Stargate] Press Patio Button"
note = "open/move the Stargate connection to the Patio (only if plaque-3 read)"
conditions = [{ type = "touch", item_id = "patio_button" }, { type = "hasFlag", flag = "read-plaque-3" }]
actions = [{ type = "showMessage", text = "With a great whooshing like the flush of a titan's toilet, the Stargate opens a new connection. You are chilled by the frigid air pouring through the opening." }, { type = "modifyRoom", room_sym = "stargate-room", patch = { desc = "A hangar-size concrete room, connected to the Aperture lab through a huge, round vault door. The Stargate is filled with a shimmering energy, from which you hear the sounds of clinking glasses punctuated by explosions. Occasionally, a bird flies out of the gate and circles it, but -- finding nowhere to land -- flies back in.", remove_exits = ["ice-pit", "parish-landing"], add_exits = [{ direction = "through the stargate", to = "patio" }] } }, { type = "removeFlag", flag = "woodland-gate-open" }, { type = "modifyRoom", room_sym = "parish-landing", patch = { remove_exits = ["stargate-room"] } }, { type = "removeFlag", flag = "snowfield-gate-open" }, { type = "modifyRoom", room_sym = "ice-pit", patch = { remove_exits = ["stargate-room"] } }, { type = "addFlag", flag = { type = "simple", name = "patio-gate-open" } }, { type = "modifyRoom", room_sym = "patio", patch = { add_exits = [{ direction = "through the stargate", to = "stargate-room" }] } }]
# trigger [Stargate] Press Patio Button (source line 134)
[[triggers]]
name = "[Stargate] Press Patio Button"
note = "open/move the Stargate connection to the Patio (only if plaque-3 read)"
conditions = [{ type = "touch", item_id = "patio_button" }, { type = "missingFlag", flag = "read-plaque-3" }]
actions = [{ type = "showMessage", text = "The fork-shaped button is already pressed down as far as it can go." }]
# trigger [East-of-Building] Pluck Dental Floss (source line 45)
[[triggers]]
name = "[East-of-Building] Pluck Dental Floss"
only_once = true
conditions = [{ type = "take", item_id = "dental_floss" }]
actions = [{ type = "showMessage", text = "You pluck a strand of floss from the bush. It comes away easily — disturbingly so. Minty. Strong. Too strong. You’re no botanist, but you’re pretty sure this shouldn’t be growing out of a shrubbery." }, { type = "awardPoints", amount = 5 }, { type = "setItemDescription", item_sym = "weird_bush", text = "A squat, leafy bush now stripped of its floss-like strands, bare branches jutting out awkwardly. A small sign next to it reads 'Pride of Montana'." }]
# trigger [Inca-Road] Traveling Without Towel (source line 31)
[[triggers]]
name = "[Inca-Road] Traveling Without Towel"
only_once = true
conditions = [{ type = "enter", room_id = "inca-road" }, { type = "missingItem", item_id = "towel" }]
actions = [{ type = "showMessage", text = "You pause here, realizing with increasing concern that you are traveling without a towel." }]
# trigger [Loading-Dock] Spawn Special Delivery (source line 116)
[[triggers]]
name = "[Loading-Dock] Spawn Special Delivery"
only_once = true
conditions = [{ type = "leave", room_id = "loading-dock" }]
actions = [{ type = "spawnItemInRoom", item_id = "delivery_box", room_id = "loading-dock" }, { type = "showMessage", text = "You hear a thud behind you, back toward the dock, like something was just dropped off. You glimpse a drone flying away quickly, as if hoping not to be seen. Was that an Initech logo on the side?" }]
# trigger [Loading-Dock] Open Security Crate (Key) (source line 121)
[[triggers]]
name = "[Loading-Dock] Open Security Crate (Key)"
only_once = true
conditions = [{ type = "unlock", item_id = "security_locker" }]
actions = [{ type = "spawnItemInContainer", item_id = "crowbar", container_id = "security_locker" }, { type = "spawnItemInContainer", item_id = "security_log", container_id = "security_locker" }, { type = "spawnItemInContainer", item_id = "strange_liquid", container_id = "security_locker" }, { type = "spawnItemInContainer", item_id = "initech_mug", container_id = "security_locker" }, { type = "addFlag", flag = { type = "simple", name = "unlocked-security-crate" } }, { type = "showMessage", text = "The ear wax on the tip of the key eases it into the rusted lock, which snaps open with a satisfying clunk." }]
# trigger [Loading-Dock] Open Security Crate (Break) (source line 130)
[[triggers]]
name = "[Loading-Dock] Open Security Crate (Break)"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "security_locker", action = "break" }, { type = "missingFlag", flag = "unlocked-security-crate" }]
actions = [{ type = "despawnItem", item_id = "security_locker" }, { type = "spawnItemCurrentRoom", item_id = "crowbar" }, { type = "spawnItemCurrentRoom", item_id = "security_log" }, { type = "spawnItemCurrentRoom", item_id = "shattered_vial" }, { type = "spawnItemCurrentRoom", item_id = "initech_mug" }, { type = "showMessage", text = "With a few hefty blows, you manage to break the lock haft completely off of the security locker -- well after a few misses had already caved in the lid and destroyed it, but you were having fun. It looks like you broke a couple of the items that were inside in the process." }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA Announcement: 'Someone broke into the security locker on the dock. Mind your belongings and report any suspicious activity to security.'" }]
# trigger [Loading-Dock] Open Security Crate (Burn) (source line 142)
[[triggers]]
name = "[Loading-Dock] Open Security Crate (Burn)"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "security_locker", action = "burn" }, { type = "missingFlag", flag = "unlocked-security-crate" }]
actions = [{ type = "despawnItem", item_id = "security_locker" }, { type = "spawnItemCurrentRoom", item_id = "crowbar" }, { type = "spawnItemCurrentRoom", item_id = "burned_security_log" }, { type = "spawnItemCurrentRoom", item_id = "strange_liquid" }, { type = "spawnItemCurrentRoom", item_id = "initech_mug" }, { type = "showMessage", text = "WHOOOOOMP! The locker, which you now realize may have been made from the solid magnesium magnolia trees of Siwenna, goes up in a white hot flash -- taking your eyebrows with it. It looks like *some* of the items inside weren't flammable." }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA Announcement: 'Someone used an Arson-Aid to torch the security locker at the loading dock. An investigation is underway. Report anyone with scorched clothes or missing eyebrows to security.'" }]
# trigger [Loading-Dock] Got Crowbar (source line 154)
[[triggers]]
name = "[Loading-Dock] Got Crowbar"
only_once = true
conditions = [{ type = "take", item_id = "crowbar" }]
actions = [{ type = "showMessage", text = "You feel like Gordon Freeman now, and wonder if maybe Barney's on security here?" }, { type = "addFlag", flag = { type = "simple", name = "got-crowbar" } }, { type = "awardPoints", amount = 3 }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "... and then you wonder why you're thinking of Barney as a real person instead of a character in a game. And Gordon, for that matter. Wait, he was just *fiction*, right? Come to think of it, you feel a little unsure of reality, and it's worse the nearer you are to the building." }], note = "notice fiction bleed" }]
# trigger [Sublevel-1-Entrance] Black Knight Hints About Vending Machine (source line 43)
[[triggers]]
name = "[Sublevel-1-Entrance] Black Knight Hints About Vending Machine"
only_once = true
conditions = [{ type = "withNpc", npc_id = "black_knight" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "npcSays", npc_id = "black_knight", quote = "Lo, good Sir! I grow weary, and require a chalice of electrolytes and caffeine, but cannot leave my post. Nor do I want to dull my new sword doing battle with that infernal contraption in the lobby again. If you pass by there, retrieve one for me and I shall be further in your debt." }]
# trigger [Med-Bay] EMH/Cure Nausea (source line 36)
[[triggers]]
name = "[Med-Bay] EMH/Cure Nausea"
note = "can add specific has flag conditions here to use this for any nausea-inducing condition"
conditions = [{ type = "talkToNpc", npc_id = "emh" }, { type = "hasFlag", flag = "read-vogon-poetry" }]
actions = [{ type = "removeFlag", flag = "read-vogon-poetry" }, { type = "awardPoints", amount = 3 }, { type = "npcSays", npc_id = "emh", quote = "You poor fool, you look horrible. You've been reading Vogon poetry, hmmm? Here, this should help." }]
# trigger [Med-Bay] EMH/Cure Nausea (source line 36)
[[triggers]]
name = "[Med-Bay] EMH/Cure Nausea"
note = "can add specific has flag conditions here to use this for any nausea-inducing condition"
conditions = [{ type = "talkToNpc", npc_id = "emh" }, { type = "hasFlag", flag = "ate-sausage" }]
actions = [{ type = "awardPoints", amount = 3 }, { type = "npcSays", npc_id = "emh", quote = "Ugh -- your breath is horrid! You ate one of Dibbler's sausages, didn't you? Tasty but toxic, I say." }, { type = "removeFlag", flag = "ate-sausage" }]
# trigger [Med-Bay] EMH/Cure Nausea (source line 36)
[[triggers]]
name = "[Med-Bay] EMH/Cure Nausea"
note = "can add specific has flag conditions here to use this for any nausea-inducing condition"
conditions = [{ type = "talkToNpc", npc_id = "emh" }, { type = "hasFlag", flag = "status:nauseated" }]
actions = [{ type = "removeFlag", flag = "status:nauseated" }, { type = "showMessage", text = "The EMH gives you a hypospray in the neck, and your nausea subsides." }]
# trigger [Med-Bay] EMH/After HAL Rebooted (source line 55)
[[triggers]]
name = "[Med-Bay] EMH/After HAL Rebooted"
only_once = true
conditions = [{ type = "withNpc", npc_id = "emh" }, { type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "setNpcState", npc_id = "emh", state = "normal" }, { type = "npcSays", npc_id = "emh", quote = "Well, now you've done it. HAL is operational again. We'll surely regret it -- or at least *you* will." }]
# trigger [Sublevel-1-Entrance] Refuse Visitor Pass (source line 32)
[[triggers]]
name = "[Sublevel-1-Entrance] Refuse Visitor Pass"
conditions = [{ type = "giveToNpc", item_id = "visitor_pass", npc_id = "black_knight" }]
actions = [{ type = "npcRefuseItem", npc_id = "black_knight", reason = "Ha! Perhaps you ARE Arthur, King of the Britons... but I said NONE shall pass. Surely you speak the King's English, so-called Arthur-King?!" }]
# trigger [Sublevel-1-Entrance] Meet the Black Knight (source line 37)
[[triggers]]
name = "[Sublevel-1-Entrance] Meet the Black Knight"
only_once = true
conditions = [{ type = "talkToNpc", npc_id = "black_knight" }, { type = "hasFlag", flag = "ate-sausage" }]
actions = [{ type = "npcSays", npc_id = "black_knight", quote = "Ye Gods! That stench is a foul and powerful weapon, but it will not move me. I move for NO man, even if my nostrils recoil from his very presence." }]
# trigger [Sublevel-1-Entrance] Meet the Black Knight (source line 37)
[[triggers]]
name = "[Sublevel-1-Entrance] Meet the Black Knight"
only_once = true
conditions = [{ type = "talkToNpc", npc_id = "black_knight" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "talked-to-knight" } }, { type = "npcSays", npc_id = "black_knight", quote = "You shall not pass. This wing is closed... and may not exist at all. Begone!" }]
# trigger [Sublevel-1-Entrance] Taking Sword Angers Knight (source line 46)
[[triggers]]
name = "[Sublevel-1-Entrance] Taking Sword Angers Knight"
conditions = [{ type = "takeFromNpc", item_id = "dull_longsword", npc_id = "black_knight" }]
actions = [{ type = "setNpcState", npc_id = "black_knight", state = "mad" }, { type = "npcSays", npc_id = "black_knight", quote = "Wha-- HEY! Give that back, you -- you -- cowardly cur!" }]
# trigger [Sublevel-1-Entrance] Return Dull Sword to Knight (source line 51)
[[triggers]]
name = "[Sublevel-1-Entrance] Return Dull Sword to Knight"
conditions = [{ type = "giveToNpc", item_id = "dull_longsword", npc_id = "black_knight" }]
actions = [{ type = "npcSays", npc_id = "black_knight", quote = "Right. Now don't do it again, or I shall be forced to bludgeon you with it. You still may not pass." }, { type = "setNpcState", npc_id = "black_knight", state = "normal" }]
# trigger [Sublevel-1-Entrance] Sharpen Knight's Sword (source line 56)
[[triggers]]
name = "[Sublevel-1-Entrance] Sharpen Knight's Sword"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "dull_longsword", action = "sharpen" }]
actions = [{ type = "replaceItem", old_sym = "dull_longsword", new_sym = "keen_longsword" }, { type = "showMessage", text = "After years of sharpening Ginsu knives to cut open aluminum cans and tomatoes, you have no problem honing the Black Knight's sword to a keen edge." }, { type = "addFlag", flag = { type = "simple", name = "sword-sharpened" } }, { type = "awardPoints", amount = 3 }]
# trigger [Sublevel-1-Entrance] Black Knight Kicks Player After Sword Taken (source line 63)
[[triggers]]
name = "[Sublevel-1-Entrance] Black Knight Kicks Player After Sword Taken"
conditions = [{ type = "withNpc", npc_id = "black_knight" }, { type = "npcInState", npc_id = "black_knight", state = "mad" }, { type = "missingFlag", flag = "appeased-black-knight" }]
actions = [{ type = "showMessage", text = "The Black Knight prances around the room, occasionally trying to kick you in the shins." }, { type = "npcSaysRandom", npc_id = "black_knight" }]
# trigger [Sublevel-1-Entrance] Sharpened Sword Returned (source line 70)
[[triggers]]
name = "[Sublevel-1-Entrance] Sharpened Sword Returned"
only_once = true
conditions = [{ type = "giveToNpc", item_id = "keen_longsword", npc_id = "black_knight" }]
actions = [{ type = "restrictItem", item_id = "keen_longsword" }, { type = "addFlag", flag = { type = "simple", name = "appeased-black-knight" } }, { type = "setBarredMessage", exit_from = "sublevel-1-entrance", exit_to = "room-aa-3b", msg = "As you near the door, you are overwhelmed by a sense of spinning through an unending series of fictional realities, compelling you to step away." }, { type = "awardPoints", amount = 5 }, { type = "setNpcState", npc_id = "black_knight", state = "happy" }, { type = "npcSays", npc_id = "black_knight", quote = "hank you, good Sir! For your kind deed, I swear on my sword that I shall not cut you to bits with it. And you may pass wherever you like." }]
# trigger [Sublevel Lift] Press Main Button (source line 33)
[[triggers]]
name = "[Sublevel Lift] Press Main Button"
conditions = [{ type = "touch", item_id = "main_button_sublevel" }]
actions = [{ type = "pushPlayerTo", room_id = "lift-main" }, { type = "showMessage", text = "The elevator shouts \"Yeeee-Haw!\", and you're off literally like a rocket, accelerating and pressed into the floor of the elevator for what seems like a minute. You decelerate nearly as quickly, slamming into the elevator ceiling and then falling again when you arrive at the main level. \"Have a WONDERFUL day!\", it intones as the doors slide softly open." }]
# trigger [Sublevel Lift] Press AA-3 Button (source line 39)
[[triggers]]
name = "[Sublevel Lift] Press AA-3 Button"
conditions = [{ type = "touch", item_id = "aa_3_button_sublevel" }]
actions = [{ type = "showMessage", text = "The elevator closes and opens its doors a few times, as if to show you that you're already at that level." }]
# trigger Spawn the EMH (source line 31)
[[triggers]]
name = "Spawn the EMH"
only_once = true
conditions = [{ type = "touch", item_id = "emh_button" }]
actions = [{ type = "spawnNpcIntoRoom", npc_sym = "emh", room_sym = "med-bay" }, { type = "awardPoints", amount = 3 }, { type = "npcSays", npc_id = "emh", quote = "Please state the nature of your medical emergency." }]
# trigger [Monolith-Room] Announce Monolith Access After HAL Rebooted (source line 36)
[[triggers]]
name = "[Monolith-Room] Announce Monolith Access After HAL Rebooted"
only_once = true
conditions = [{ type = "flagComplete", flag = "hal-reboot" }, { type = "withNpc", npc_id = "hal_9000" }]
actions = [{ type = "showMessage", text = "HAL-9000's lens turns to focus on the monolith dominating the room." }, { type = "npcSays", npc_id = "hal_9000", quote = "Access granted, Candidate #2112-42. The monolith awaits your touch." }]
# trigger [Monolith-Room] Monolith Touch Prevented (HAL not ready) (source line 45)
[[triggers]]
name = "[Monolith-Room] Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "touch", item_id = "monolith" }, { type = "hasFlag", flag = "hal-reboot#0" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's dim red lens flickers briefly but he cannot respond coherently. Something prevents you from touching the ancient artifact - as if an invisible barrier surrounds it." }]
# trigger [Monolith-Room] Monolith Touch Prevented (HAL not ready) (source line 45)
[[triggers]]
name = "[Monolith-Room] Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "touch", item_id = "monolith" }, { type = "hasFlag", flag = "hal-reboot#1" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's dim red lens flickers briefly but he cannot respond coherently. Something prevents you from touching the ancient artifact - as if an invisible barrier surrounds it." }]
# trigger [Monolith-Room] Monolith Touch Prevented (HAL not ready) (source line 45)
[[triggers]]
name = "[Monolith-Room] Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "touch", item_id = "monolith" }, { type = "hasFlag", flag = "hal-reboot#2" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's lens swivels toward you." }, { type = "npcSays", npc_id = "hal_9000", quote = "I'm sorry, Candidate. I cannot allow access to the monolith until my systems are fully operational. Please insert one more memory module." }]
# trigger [Monolith-Room] Monolith Touch Prevented (HAL not ready) (source line 45)
[[triggers]]
name = "[Monolith-Room] Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "touch", item_id = "monolith" }, { type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "touched-monolith" } }, { type = "awardPoints", amount = 15 }, { type = "showMessage", text = "You reach out and place your palm against the monolith's impossibly smooth surface. For a moment, nothing happens. Then reality seems to shiver around you. Images flash through your mind - star-filled voids, impossible geometries, the birth and death of civilizations. You stagger backward, forever changed by the contact. The path to understanding has opened." }]
# trigger [Security-Station] Pry Evidence Locker Open (source line 49)
[[triggers]]
name = "[Security-Station] Pry Evidence Locker Open"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "evidence_locker_closed", action = "open" }]
actions = [{ type = "replaceItem", old_sym = "evidence_locker_closed", new_sym = "evidence_locker_open" }, { type = "showMessage", text = "Using all your weight, all your might, and most of your reserved F-bomb arsenal you pry the locker open, leaving the door barely attached." }, { type = "awardPoints", amount = 2 }]
# trigger [Security-Station] Take Sonic Screwdriver (source line 55)
[[triggers]]
name = "[Security-Station] Take Sonic Screwdriver"
only_once = true
conditions = [{ type = "take", item_id = "sonic_screwdriver" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-sonic" } }, { type = "awardPoints", amount = 3 }]
# trigger [Sublevel-1-Entrance] Arrived (source line 36)
[[triggers]]
name = "[Sublevel-1-Entrance] Arrived"
only_once = true
conditions = [{ type = "enter", room_id = "sublevel-1-entrance" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "entered-sublevel-1" } }]
# trigger Spawn Husky (source line 22)
[[triggers]]
name = "Spawn Husky"
only_once = true
conditions = [{ type = "useItem", item_id = "charred_journal", ability = "read" }]
actions = [{ type = "spawnNpcIntoRoom", npc_sym = "husky_thing", room_sym = "snow-camp" }, { type = "addFlag", flag = { type = "simple", name = "husky-spawned" } }]
# trigger [Husky] Stalk the Candidate (source line 28)
[[triggers]]
name = "[Husky] Stalk the Candidate"
conditions = [{ type = "enter", room_id = "snowfield" }, { type = "hasFlag", flag = "husky-spawned" }]
actions = [{ type = "spawnNpcIntoRoom", npc_sym = "husky_thing", room_sym = "snowfield" }]
# trigger [Husky] Stalk the Candidate (source line 35)
[[triggers]]
name = "[Husky] Stalk the Candidate"
conditions = [{ type = "enter", room_id = "snow-camp" }, { type = "hasFlag", flag = "husky-spawned" }]
actions = [{ type = "spawnNpcIntoRoom", npc_sym = "husky_thing", room_sym = "snow-camp" }]
# trigger [Plaque 2] Must Melt to Read (source line 68)
[[triggers]]
name = "[Plaque 2] Must Melt to Read"
conditions = [{ type = "useItem", item_id = "plaque_2_frozen", ability = "read" }]
actions = [{ type = "denyRead", reason = "You'll have to melt the ice encasing the pillar in order to read the plaque on it." }, { type = "addFlag", flag = { type = "simple", name = "tried-read-plaque-2" } }]
# trigger [Plaque 2] Read the Plaque (source line 74)
[[triggers]]
name = "[Plaque 2] Read the Plaque"
only_once = true
conditions = [{ type = "useItem", item_id = "plaque_2", ability = "read" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-plaque-2" } }, { type = "awardPoints", amount = 10 }]
# trigger [Plaque 2] Pile Firewood (source line 80)
[[triggers]]
name = "[Plaque 2] Pile Firewood"
conditions = [{ type = "drop", item_id = "firewood" }, { type = "inRoom", room_id = "ice-pit" }]
actions = [{ type = "showMessage", text = "You toss the firewood down next to the ice pillar. It can't be a coincidence that it falls into the shape of a perfect log-cabin fire lay, complete with kindling in the center." }, { type = "awardPoints", amount = 5 }, { type = "replaceItem", old_sym = "firewood", new_sym = "unlit_campfire" }]
# trigger [Plaque 2] Light Campfire -> Melt Ice to Reveal Plaque (source line 89)
[[triggers]]
name = "[Plaque 2] Light Campfire -> Melt Ice to Reveal Plaque"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "unlit_campfire", action = "burn" }]
actions = [{ type = "showMessage", text = "The kindling catches quickly, and the larger cut branches begin to burn after a few minutes. The ice around the nearby pillar begins to melt." }, { type = "awardPoints", amount = 2 }, { type = "replaceItem", old_sym = "unlit_campfire", new_sym = "campfire" }, { type = "addFlag", flag = { type = "simple", name = "campfire-lit" } }, { type = "addFlag", flag = { type = "sequence", name = "reveal-ice-plaque", end = 4 } }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "Tiny rivulets of water begin to form on the side of the ice pillar closest to the fire." }, { type = "setItemDescription", item_sym = "plaque_2_frozen", text = "Small rivulets of water have begun to stream down the sides of the pillar, but it's had little effect on the thickness of the ice so far." }, { type = "advanceFlag", flag = "reveal-ice-plaque" }], note = "melting sequence to #1" }, { type = "scheduleIn", turns_ahead = 3, actions = [{ type = "showMessage", text = "Water begins to stream more quickly off of the pillar, which is beginning to shrink, revealing a darker object within." }, { type = "setItemDescription", item_sym = "plaque_2_frozen", text = "Water streams more quickly from the slowly shrinking pillar. An intricate, white object begins to take shape within." }, { type = "advanceFlag", flag = "reveal-ice-plaque" }], note = "melting sequence to #2" }, { type = "scheduleIn", turns_ahead = 4, actions = [{ type = "showMessage", text = "Water flows freely now from the rapidly shrinking ice sheet, starting to reveal the carved marble pillar inside. There's still too much ice on the plaque to read it." }, { type = "setItemDescription", item_sym = "plaque_2_frozen", text = "Water now runs freely from all sides of the ice pillar, beginning to reveal the intricately carved pillar within." }, { type = "advanceFlag", flag = "reveal-ice-plaque" }], note = "melting sequence to #3" }, { type = "scheduleIn", turns_ahead = 5, actions = [{ type = "advanceFlag", flag = "reveal-ice-plaque" }, { type = "showMessage", text = "The ice has now melted almost completely away from the pillar and plaque, just as the fire dies down a bit from the meltwater dousing its base." }, { type = "awardPoints", amount = 10 }, { type = "replaceItem", old_sym = "plaque_2_frozen", new_sym = "plaque_2" }, { type = "setItemDescription", item_sym = "campfire", text = "A nice, warm campfire, slowly burning down to nothing." }], note = "finish melting sequence (#4)" }, { type = "scheduleIn", turns_ahead = 12, actions = [{ type = "setItemDescription", item_sym = "campfire", text = "Some frozen ash -- all that remains of a once-welcoming campfire." }, { type = "conditional", condition = { type = "inRoom", room_id = "ice-pit" }, actions = [{ type = "showMessage", text = "The campfire finally goes completely out and begins to freeze over again." }] }], note = "finish burning campfire down" }]
# trigger [High-Ridge] Billy Wakes Up (source line 5)
[[triggers]]
name = "[High-Ridge] Billy Wakes Up"
only_once = true
note = "chance of random Billy the Mountain Zappa reference"
conditions = [{ type = "useItem", item_id = "scrawled_note", ability = "read" }, { type = "chance", one_in = 2.380952380952381 }]
actions = [{ type = "showMessage", text = "You feel a deep rumbling coming up through your feet. Suddenly, a voice booms through the trees and the canyon below: \"WARNING: SELF-DESTRUCT SEQUENCE INITIATED! All personnel evacuate immediately! Demolition commences on REL 10!\"" }, { type = "addFlag", flag = { type = "simple", name = "self-destruct-armed" } }, { type = "scheduleOn", on_turn = 10, actions = [{ type = "showMessage", text = "KABOOM! 💥 The entire area shakes violently as a deep rumbling rocks the mountain!" }], note = "self-destruct fires" }, { type = "scheduleOn", on_turn = 11, actions = [{ type = "showMessage", text = "The rumbling stops. Then, after a minute, the voice again: \"Erm, it turns out that was just Billy waking up. Cancel the evacuation, and have a productive day.\"" }, { type = "removeFlag", flag = "self-destruct-armed" }, { type = "awardPoints", amount = 2 }, { type = "addFlag", flag = { type = "simple", name = "survived-fake-explosion" } }], note = "lol just Billy" }]
# trigger [Woodland] Gnat Punctuation (source line 6)
[[triggers]]
name = "[Woodland] Gnat Punctuation"
only_once = true
conditions = [{ type = "leave", room_id = "high-ridge" }]
actions = [{ type = "scheduleInIf", turns_ahead = 2, condition = { any = [{ type = "inRoom", room_id = "high-ridge" }, { type = "inRoom", room_id = "parish-landing" }, { type = "inRoom", room_id = "two-sheds-landing" }, { type = "inRoom", room_id = "two-sheds" }, { type = "inRoom", room_id = "guard-post" }] }, on_false = { type = "retryNextTurn" }, actions = [{ type = "conditional", condition = { type = "missingFlag", flag = "read-scrawled-note" }, actions = [{ type = "showMessage", text = "A cloud of gnats drifts by, forming the shapes of the words \"rEAd tHe HiGh RidGe NotE\"." }] }, { type = "conditional", condition = { type = "hasFlag", flag = "read-scrawled-note" }, actions = [{ type = "showMessage", text = "A cloud of gnats drifts by, lazily holding the shape of \"..?..\"." }] }], note = "gnats: first fly-by, nudges player to read scrawled_note" }, { type = "scheduleInIf", turns_ahead = 6, condition = { any = [{ type = "inRoom", room_id = "high-ridge" }, { type = "inRoom", room_id = "parish-landing" }, { type = "inRoom", room_id = "two-sheds-landing" }, { type = "inRoom", room_id = "two-sheds" }, { type = "inRoom", room_id = "guard-post" }] }, on_false = { type = "retryNextTurn" }, actions = [{ type = "showMessage", text = "The gnat cloud zips past in the other direction, this time shaped like \"!!!\"." }], note = "gnats: alarmed" }]
# trigger [Two-Sheds-Landing] Cut or Chop Tree (source line 23)
[[triggers]]
name = "[Two-Sheds-Landing] Cut or Chop Tree"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "fallen_tree", action = "cut" }]
actions = [{ type = "showMessage", text = "With considerable effort and just one blister, you're able to chop a path through the branches. The stone steps continue to curve upward from here." }, { type = "despawnItem", item_id = "fallen_tree" }, { type = "addFlag", flag = { type = "simple", name = "cleared-fallen-tree" } }, { type = "addFlag", flag = { type = "simple", name = "chopped-fallen-tree" } }, { type = "awardPoints", amount = 5 }]
# trigger [Two-Sheds-Landing] Arson-Aid Used on Tree (source line 31)
[[triggers]]
name = "[Two-Sheds-Landing] Arson-Aid Used on Tree"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "burn", target_id = "fallen_tree", tool_id = "arson_aid" }]
actions = [{ type = "showMessage", text = "You aim the Arson-Aid and begin to squeeze the trigger when the device erupts into a fireball! Panicking, you throw the whole Arson-Aid into the tree." }]
# trigger [Two-Sheds-Landing] Burn Tree (source line 36)
[[triggers]]
name = "[Two-Sheds-Landing] Burn Tree"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "fallen_tree", action = "burn" }]
actions = [{ type = "despawnItem", item_id = "fallen_tree" }, { type = "addFlag", flag = { type = "simple", name = "cleared-fallen-tree" } }, { type = "addFlag", flag = { type = "simple", name = "burned-fallen-tree" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "WHOOOOOMPH! The fallen tree erupts into flame and, quite improbably, is reduced to ash in mere seconds." }]
# trigger [Guard-Post] Interesting Passers-By (source line 31)
[[triggers]]
name = "[Guard-Post] Interesting Passers-By"
only_once = true
note = "different characters depending on how they got past the fallen_tree"
conditions = [{ type = "enter", room_id = "guard-post" }, { type = "chance", one_in = 1.1764705882352942 }, { type = "hasFlag", flag = "burned-fallen-tree" }]
actions = [{ type = "showMessage", text = "Smokey Bear tromps past the guard post, growling \"Nobody ever listens!\" while glaring right at you." }]
# trigger [Guard-Post] Interesting Passers-By (source line 31)
[[triggers]]
name = "[Guard-Post] Interesting Passers-By"
only_once = true
note = "different characters depending on how they got past the fallen_tree"
conditions = [{ type = "enter", room_id = "guard-post" }, { type = "chance", one_in = 1.1764705882352942 }, { type = "hasFlag", flag = "chopped-fallen-tree" }]
actions = [{ type = "showMessage", text = "Paul Bunyan gives you a nod as he lumbers by with Babe the Blue Ox, carrying the remains of the tree you chopped up." }, { type = "addFlag", flag = { type = "simple", name = "saw-paul-bunyan" } }]
# trigger [Global] Cannot Drop No Cake (source line 61)
[[triggers]]
name = "[Global] Cannot Drop No Cake"
conditions = [{ type = "drop", item_id = "no_cake" }]
actions = [{ type = "despawnItem", item_id = "no_cake" }, { type = "spawnItemInInventory", item_id = "no_cake" }, { type = "showMessage", text = "Try as you might, you cannot rid yourself of the feeling of a missing, promised dessert. The cake was a lie." }]
# trigger Burn After Reading? (source line 69)
[[triggers]]
name = "Burn After Reading?"
conditions = [{ type = "actOnItem", target_sym = "scrawled_note", action = "burn" }]
actions = [{ type = "showMessage", text = "You burn the note, singeing your fingers in the process. Do you think this is a spy novel?" }, { type = "despawnItem", item_id = "scrawled_note" }]
# trigger [High-Ridge] Read Scrawled Note (source line 75)
[[triggers]]
name = "[High-Ridge] Read Scrawled Note"
only_once = true
conditions = [{ type = "useItem", item_id = "scrawled_note", ability = "read" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-scrawled-note" } }]
# trigger The Cake Is A Lie (source line 79)
[[triggers]]
name = "The Cake Is A Lie"
conditions = [{ type = "ingest", item_sym = "ephemeral_cake", mode = "eat" }]
actions = [{ type = "showMessage", text = "Just as you try to take a bite of the cake, it vanishes without a trace." }, { type = "spawnItemInInventory", item_id = "no_cake" }, { type = "awardPoints", amount = 2 }]
# trigger [Parish-Landing] Plaque 1 Too Grimy to Read (source line 42)
[[triggers]]
name = "[Parish-Landing] Plaque 1 Too Grimy to Read"
conditions = [{ type = "useItem", item_id = "plaque_1", ability = "read" }, { type = "missingFlag", flag = "cleaned-plaque-1" }]
actions = [{ type = "denyRead", reason = "The plaque is too grimy to make out the words. You'll need to find a way to clean it off." }, { type = "addFlag", flag = { type = "simple", name = "tried-read-plaque-1" } }]
# trigger [Parish-Landing] Plaque 1 Cleaned (source line 50)
[[triggers]]
name = "[Parish-Landing] Plaque 1 Cleaned"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "plaque_1", action = "clean" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "cleaned-plaque-1" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "With some saliva and a little effort, you're able to remove the grime and bring the plaque to a dull shine." }]
# trigger [Parish-Landing] Read Cleaned Plaque 1 (source line 57)
[[triggers]]
name = "[Parish-Landing] Read Cleaned Plaque 1"
only_once = true
conditions = [{ type = "useItem", item_id = "plaque_1", ability = "read" }, { type = "hasFlag", flag = "cleaned-plaque-1" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-plaque-1" } }, { type = "awardPoints", amount = 5 }]
# trigger Cheat Mode (source line 48)
[[triggers]]
name = "Cheat Mode"
conditions = [{ type = "touch", item_id = "cheat_button" }]
actions = [{ type = "showMessage", text = "Morphed the room into an endgame backdoor!" }, { type = "modifyRoom", room_sym = "dev-room", patch = { name = "AA-3B Back Entrance", desc = "Where there used to be a High Isolated Ridge around you, there is now a blank white room with a door marked 'WIN!'", remove_exits = ["high-ridge"], add_exits = [{ direction = "win the game", to = "room-aa-3b", barred_message = "You must hold no cake to fathom Room AA-3B's mysteries.", required_items = ["no_cake"] }] } }]
# trigger Big Red Button Pushed (source line 70)
[[triggers]]
name = "Big Red Button Pushed"
note = "test for the touch item command/event -- works!"
conditions = [{ type = "touch", item_id = "big_red_button" }]
actions = [{ type = "showMessage", text = "Always never press the big red button! Now look what you've done!" }, { type = "spawnNpcIntoRoom", npc_sym = "the_luggage", room_sym = "dev-room" }, { type = "modifyItem", item_sym = "big_blue_button", patch = { name = "Big Green Button", desc = "A big GREEN button, just waiting for you to press it.", text = "This used to be a blue button.", remove_container_state = true, add_abilities = [{ type = "Read" }, { type = "Unlock", target = "big_red_button" }] } }]
# trigger Big Blue Button Pushed (source line 85)
[[triggers]]
name = "Big Blue Button Pushed"
note = "test modify npc"
conditions = [{ type = "touch", item_id = "big_blue_button" }]
actions = [{ type = "showMessage", text = "Modifying the Luggage..." }, { type = "modifyNpc", npc_sym = "the_luggage", patch = { name = "Hungry Luggage", desc = "The Luggage is ravenous! Beware!!", state = { custom = "hungry" }, add_lines = [{ line = "(The Luggage nearly bites your face off when you approach.)", state = { custom = "hungry" } }], movement = { random_rooms = ["dev-room", "lounge"], timing = { type = "everyNTurns", turns = 5 }, active = true, loop_route = true } } }]
# trigger Turn Radio On (source line 109)
[[triggers]]
name = "Turn Radio On"
conditions = [{ type = "useItem", item_id = "radio", ability = "turnOn" }]
actions = [{ type = "showMessage", text = "An LED on the radio lights, and you can hear faint static." }, { type = "modifyItem", item_sym = "radio", patch = { desc = "The radio is now turned on and emitting slight static.", add_abilities = [{ type = "TurnOff" }], remove_abilities = [{ type = "TurnOn" }] } }, { type = "addFlag", flag = { type = "simple", name = "radio-on" } }]
# trigger Turn Radio Off (source line 119)
[[triggers]]
name = "Turn Radio Off"
conditions = [{ type = "useItem", item_id = "radio", ability = "turnOff" }]
actions = [{ type = "showMessage", text = "The LED goes off, and the radio goes quiet." }, { type = "modifyItem", item_sym = "radio", patch = { desc = "The radio is powered off and quiet.", add_abilities = [{ type = "TurnOn" }], remove_abilities = [{ type = "TurnOff" }] } }, { type = "removeFlag", flag = "radio-on" }]
# trigger Drink the Strange Liquid (source line 12)
[[triggers]]
name = "Drink the Strange Liquid"
note = "trip daisies for a few turns with foreshadowing"
conditions = [{ type = "ingest", item_sym = "strange_liquid", mode = "drink" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "status:tripping" } }, { type = "showMessage", text = "The strange liquid feels incredibly cold as it spreads slowly down your esophagus, then you start to... see things." }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "<Vision> A see-through doctor takes a tool from another doctor, then turns to face you with one glowing red eye." }] }, { type = "scheduleIn", turns_ahead = 4, actions = [{ type = "showMessage", text = "<Vision> A scientist peers into a vending machine. Someone shouts,\"Gordon!\" and he turns around, focusing on you with one red eye." }] }, { type = "scheduleIn", turns_ahead = 6, actions = [{ type = "showMessage", text = "<Vision> A shifty man with a red light behind one pupil hands you a hot dog, but electronic bits inside the casing nearly break your teeth when you bite into it." }] }, { type = "scheduleIn", turns_ahead = 7, actions = [{ type = "removeFlag", flag = "status:tripping" }, { type = "awardPoints", amount = 5 }] }, { type = "scheduleInIf", turns_ahead = 20, condition = { type = "missingFlag", flag = "appeased-black-knight" }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "<Flashback> A medieval knight smiles as he slices aluminum cans and tomatoes with his sword." }] }]
# trigger [Global] Open Delivery Box (source line 39)
[[triggers]]
name = "[Global] Open Delivery Box"
only_once = true
conditions = [{ type = "open", item_id = "delivery_box" }]
actions = [{ type = "despawnItem", item_id = "delivery_box" }, { type = "spawnItemCurrentRoom", item_id = "destroyed_box" }, { type = "spawnItemCurrentRoom", item_id = "towel" }, { type = "showMessage", text = """
The box sighs and collapses in a heap as soon as you touch it, relieved that its mission is over. Inside, you find a nanotruss-reinforced tachyon-powered towel with an attached note:

                Always be a frood who knows where his towel is.
                                -- F.P.""" }]
# trigger [Global] Take Vogon Poetry (source line 58)
[[triggers]]
name = "[Global] Take Vogon Poetry"
note = "merely taking poetry book does not cause status effect -- reading does"
conditions = [{ type = "take", item_id = "vogon_poetry_book" }]
actions = [{ type = "showMessage", text = "A greasy feeling of nausea overcomes you." }]
# trigger [Global] Drop Vogon Poetry (source line 65)
[[triggers]]
name = "[Global] Drop Vogon Poetry"
note = "dropping only stops the nausea if player has not read it"
conditions = [{ type = "drop", item_id = "vogon_poetry_book" }, { type = "missingFlag", flag = "read-vogon-poetry" }]
actions = [{ type = "showMessage", text = "That greasy, queasy feeling subsides." }]
# trigger [Global] Drop Vogon Poetry (source line 65)
[[triggers]]
name = "[Global] Drop Vogon Poetry"
note = "dropping only stops the nausea if player has not read it"
conditions = [{ type = "drop", item_id = "vogon_poetry_book" }, { type = "hasFlag", flag = "read-vogon-poetry" }]
actions = [{ type = "showMessage", text = "Getting rid of the book helps a little, but the poem is burned into your mind and the nausea continues." }]
# trigger [Global] Eat Sausage-Inna-Bun (source line 81)
[[triggers]]
name = "[Global] Eat Sausage-Inna-Bun"
conditions = [{ type = "ingest", item_sym = "sausage-inna-bun", mode = "eat" }]
actions = [{ type = "showMessage", text = "You hungrily chomp down the sausage stuffed with questionable meats. Before long, your guts begin to complain loudly." }, { type = "addFlag", flag = { type = "simple", name = "status:bad-breath" } }, { type = "addFlag", flag = { type = "simple", name = "ate-sausage" } }]
# trigger [Med-Bay] Talk to EMH After Finding HAL (source line 33)
[[triggers]]
name = "[Med-Bay] Talk to EMH After Finding HAL"
only_once = true
note = "quest to mobilize emh starts; ultimate reward is HAL module #1"
conditions = [{ type = "withNpc", npc_id = "emh" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "Ah -- I hoped I would catch you. Word is, you've seen HAL, or what remains of him. If you want to get him working again -- and I'm not sure I'd advise it -- I may be able to get one of those memory modules for you." }, { type = "setNpcState", npc_id = "emh", state = { custom = "want-emitter" } }, { type = "spawnItemInContainer", item_id = "broken_emitter", container_id = "lost_and_found_box" }, { type = "addFlag", flag = { type = "sequence", name = "mobilize-emh", end = 3 } }, { type = "addFlag", flag = { type = "simple", name = "got-hint-from-emh" } }]
# trigger [Med-Bay] EMH/Sonic Hint (source line 49)
[[triggers]]
name = "[Med-Bay] EMH/Sonic Hint"
only_once = true
conditions = [{ type = "enter", room_id = "med-bay" }, { type = "hasItem", item_id = "sonic_screwdriver" }, { type = "hasFlag", flag = "mobilize-emh#1" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "Please state the nature of the med... wait -- is that a sonic screwdriver? I bet you could use that to repair my mobile emitter!" }]
# trigger [Med-Bay] Advance Sequence when Broken Emitter Found (source line 56)
[[triggers]]
name = "[Med-Bay] Advance Sequence when Broken Emitter Found"
only_once = true
note = "advance to mobilize-emh#1 when emitter taken"
conditions = [{ type = "take", item_id = "broken_emitter" }]
actions = [{ type = "advanceFlag", flag = "mobilize-emh" }]
# trigger [Med-Bay] EMH Won't Take Broken Emitter (source line 62)
[[triggers]]
name = "[Med-Bay] EMH Won't Take Broken Emitter"
conditions = [{ type = "giveToNpc", item_id = "broken_emitter", npc_id = "emh" }]
actions = [{ type = "npcRefuseItem", npc_id = "emh", reason = "That's my mobile emitter all right, but it's broken. You'll need to find a way to repair it before I can help you with HAL." }]
# trigger [Med-Bay] Use Sonic On Emitter (source line 67)
[[triggers]]
name = "[Med-Bay] Use Sonic On Emitter"
conditions = [{ type = "useItemOnItem", interaction = "repair", target_id = "broken_emitter", tool_id = "sonic_screwdriver" }]
actions = [{ type = "showMessage", text = "You hold the button down on the sonic. It makes electronic whirring noises while you make a few passes over the emitter." }]
# trigger [Med-Bay] Repair Emitter (source line 72)
[[triggers]]
name = "[Med-Bay] Repair Emitter"
note = "advance to mobilize-emh#2 when mobile emitter repaired"
conditions = [{ type = "actOnItem", target_sym = "broken_emitter", action = "repair" }]
actions = [{ type = "showMessage", text = "After a few seconds, the emitter lights up and reboots, passing all self-tests." }, { type = "replaceItem", old_sym = "broken_emitter", new_sym = "working_emitter" }, { type = "awardPoints", amount = 3 }, { type = "advanceFlag", flag = "mobilize-emh" }]
# trigger [Med-Bay] EMH/Goin' Mobile! (source line 81)
[[triggers]]
name = "[Med-Bay] EMH/Goin' Mobile!"
note = "completes mobilize-emh #3; completes / grants player HAL memory module #1"
conditions = [{ type = "giveToNpc", item_id = "working_emitter", npc_id = "emh" }]
actions = [{ type = "restrictItem", item_id = "working_emitter" }, { type = "advanceFlag", flag = "mobilize-emh" }, { type = "setNpcActive", npc_sym = "emh", active = true }, { type = "setNpcState", npc_id = "emh", state = "happy" }, { type = "npcSays", npc_id = "emh", quote = "Looks like it's working properly! Let me take it for a spin..." }, { type = "showMessage", text = "The EMH flickers, then vanishes in a flash. He reappears a few moments later." }, { type = "npcSays", npc_id = "emh", quote = "All seems to be in order. As promised, I retrieved one of HAL's modules. I dropped it off in the observation room across the hall, next to HAL's memory bank -- but insert it at your own peril." }, { type = "spawnItemInRoom", item_id = "hal_module_1", room_id = "observation-room" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "Heard overhead: \"Will the E.M.H. please return to the med bay? There's been a yellow snow blinding incident.\"" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "Over the PA: \"E.M.H and sanitation, please report to the lunch room. Mr. Creosote ate a tiny, wafer thin mint again.\"" }]
# trigger [HAL] HAL/Module #1 Inserted (source line 96)
[[triggers]]
name = "[HAL] HAL/Module #1 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_1", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-1-inserted" } }, { type = "restrictItem", item_id = "hal_module_1" }, { type = "showMessage", text = "Memory module #1 magnetically locks into place and lights up." }]
# trigger Reveal HAL Module #2 (source line 14)
[[triggers]]
name = "Reveal HAL Module #2"
only_once = true
note = "reveal the nature of HAL module #2"
conditions = [{ type = "talkToNpc", npc_id = "hal_9000" }]
actions = [{ type = "modifyItem", item_sym = "hal_module_2", patch = { name = "HAL Memory Module #2", desc = "Second in the trio of HAL's memory modules, found in a vending machine (oddly) between some dehydrated water and a sandwich that both did and did not exist until eaten." } }, { type = "modifyItem", item_sym = "hal_module_2_crevice", patch = { name = "HAL Memory Module #2 (in crevice)", desc = "Second in the trio of HAL's memory modules. The module has fallen deep into a narrow crevice between the vending machine and the floor. Its red LED pulses from the darkness about a foot down, resting on what looks like decades of accumulated dust, lost coins, and possibly sentient dust bunnies. The gap is too narrow for your hand - you'll need some kind of tool to fish it out." } }]
# trigger [Main-Lobby] Spot HAL Module #2 / Start Puzzle (source line 63)
[[triggers]]
name = "[Main-Lobby] Spot HAL Module #2 / Start Puzzle"
only_once = true
conditions = [{ type = "lookAt", item_id = "vending_machine" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "found-module-2" } }, { type = "addFlag", flag = { type = "sequence", name = "module-2-puzzle", end = 2 } }]
# trigger [Main-Lobby] Pry Vending Machine Open with Crowbar (source line 75)
[[triggers]]
name = "[Main-Lobby] Pry Vending Machine Open with Crowbar"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "open", target_id = "vending_machine", tool_id = "crowbar" }]
actions = [{ type = "showMessage", text = """
With a mighty heave and several creative applications of leverage that would make Archimedes proud, you pry open the vending machine. There's a satisfying CRACK as the lock mechanism gives way. Unfortunately, your vigorous prying causes the machine to tilt forward slightly, and you watch in horror as the HAL module slides off its shelf and disappears into a narrow crevice between the machine and the floor. The other items tumble onto the floor around you.

The machine's internal speaker crackles to life one last time: 'Thank you for choosing violence. Have a mediocre day.'""" }, { type = "advanceFlag", flag = "module-2-puzzle" }, { type = "replaceDropItem", old_sym = "hal_module_2", new_sym = "hal_module_2_crevice" }, { type = "replaceDropItem", old_sym = "dehydrated_water", new_sym = "dehydrated_water" }, { type = "replaceDropItem", old_sym = "schrodingers_sandwich", new_sym = "schrodingers_sandwich" }, { type = "replaceDropItem", old_sym = "fortune_cookies_of_doom", new_sym = "fortune_cookies_of_doom" }, { type = "addFlag", flag = { type = "simple", name = "vending-machine-pried" } }, { type = "addFlag", flag = { type = "simple", name = "hal-module-in-crevice" } }, { type = "setItemDescription", item_sym = "vending_machine", text = "A battered and broken vending machine -- even more so since you took a crowbar to it. Miraculously, the glass still remains intact on the front panel which has been pried open and hangs on a slant. Empty now, the machine's contents have all spilled out on the floor." }, { type = "awardPoints", amount = 5 }]
# trigger [Main-Lobby] Fish HAL Module Out of Crevice (source line 90)
[[triggers]]
name = "[Main-Lobby] Fish HAL Module Out of Crevice"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "hal_module_2_crevice", tool_id = "fishing_line" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "You carefully lower your makeshift fishing line into the crevice where the HAL module fell. After several attempts and some creative swearing, you manage to hook the module with the paper clip. You slowly, carefully pull it up, holding your breath the entire time. Success! The module is yours, though it's now covered in dust and what might be ancient gum." }, { type = "despawnItem", item_id = "hal_module_2_crevice" }, { type = "setItemDescription", item_sym = "hal_module_2", text = "Second in the trio of HAL's missing memory modules. Its red LED pulses gently, like a heartbeat—or a warning. Its case was cracked during retrieval from the vending machine and floor crevice, but it still seems serviceable." }, { type = "spawnItemInInventory", item_id = "hal_module_2" }, { type = "awardPoints", amount = 10 }, { type = "addFlag", flag = { type = "simple", name = "hal-module-2-retrieved" } }, { type = "advanceFlag", flag = "module-2-puzzle" }]
# trigger [Main-Lobby] Can't Reach HAL Module in Crevice (source line 104)
[[triggers]]
name = "[Main-Lobby] Can't Reach HAL Module in Crevice"
conditions = [{ type = "take", item_id = "hal_module_2_crevice" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "The HAL module has fallen deep into a narrow crevice between the vending machine and the floor. You try to reach it with your hand, but the gap is too narrow. Your fingers can just barely brush against the module, pushing it slightly further away. You're going to need some kind of fishing tool to retrieve it." }]
# trigger [HAL] HAL/Module #2 Inserted (source line 112)
[[triggers]]
name = "[HAL] HAL/Module #2 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_2", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-2-inserted" } }, { type = "restrictItem", item_id = "hal_module_2" }, { type = "showMessage", text = "Memory module #2 magnetically locks into place and lights up." }]
# trigger Reveal HAL Module #3 (source line 13)
[[triggers]]
name = "Reveal HAL Module #3"
only_once = true
note = "reveal nature of electronic gizmo once HAL is met"
conditions = [{ type = "talkToNpc", npc_id = "hal_9000" }]
actions = [{ type = "modifyItem", item_sym = "hal_module_3", patch = { name = "HAL Memory Module #3", desc = "The final piece of HAL’s fragmented mind. The outer shell is pristine, but something about it feels... watchful. Once inserted, the full system may awaken — and then things might get complicated." } }]
# trigger [HAL] HAL/Module #3 Inserted (source line 26)
[[triggers]]
name = "[HAL] HAL/Module #3 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_3", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-3-inserted" } }, { type = "restrictItem", item_id = "hal_module_3" }, { type = "showMessage", text = "Memory module #3 magnetically locks into place and lights up." }]
# trigger [Monolith-Room] HAL/Start Reboot Sequence (source line 5)
[[triggers]]
name = "[Monolith-Room] HAL/Start Reboot Sequence"
only_once = true
note = "talking to HAL first time initiates the HAL reboot puzzle sequence"
conditions = [{ type = "talkToNpc", npc_id = "hal_9000" }]
actions = [{ type = "addFlag", flag = { type = "sequence", name = "hal-reboot", end = 3 } }, { type = "addFlag", flag = { type = "simple", name = "talked-to-hal" } }, { type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-0" } }, { type = "npcSays", npc_id = "hal_9000", quote = "(when you speak, the red light in HAL's lens begins to pulse slowly, then grows steady)" }]
# trigger [Monolith-Room] HAL/One Module In (source line 14)
[[triggers]]
name = "[Monolith-Room] HAL/One Module In"
conditions = [{ type = "hasFlag", flag = "hal-reboot#1" }]
actions = [{ type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-1" } }]
# trigger [Monolith-Room] HAL/Two Modules In (source line 21)
[[triggers]]
name = "[Monolith-Room] HAL/Two Modules In"
conditions = [{ type = "hasFlag", flag = "hal-reboot#2" }]
actions = [{ type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-2" } }]
# trigger [Monolith-Room] HAL/All Modules In (source line 28)
[[triggers]]
name = "[Monolith-Room] HAL/All Modules In"
only_once = true
conditions = [{ type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "awardPoints", amount = 10 }, { type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-3" } }, { type = "showMessage", text = "All memory now restored, HAL-9000 finishes rebooting and is fully operational." }]
# trigger [Hint] Invitation Hint (source line 8)
[[triggers]]
name = "[Hint] Invitation Hint"
only_once = true
conditions = [{ type = "hasFlag", flag = "got-invitation" }]
actions = [{ type = "scheduleInIf", turns_ahead = 15, condition = { all = [{ type = "hasFlag", flag = "got-invitation" }, { type = "missingFlag", flag = "got-visitor-pass" }, { type = "hasVisited", room_id = "b-a-office" }] }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "The invitation has cooled down enough now for you to give it to the receptionist in the Amble Adventures office ... maybe she'll help you now." }], note = "invitation hint" }]
# trigger [Status] Nauseated (source line 25)
[[triggers]]
name = "[Status] Nauseated"
conditions = [{ type = "hasFlag", flag = "status:nauseated" }, { type = "chance", one_in = 2.0 }]
actions = [{ type = "spinnerMessage", spinner = "nauseated" }]
# trigger [Status] Read Vogon Poetry > Persistent Nausea (source line 31)
[[triggers]]
name = "[Status] Read Vogon Poetry > Persistent Nausea"
conditions = [{ type = "useItem", item_id = "vogon_poetry_book", ability = "read" }]
actions = [{ type = "showMessage", text = "You nearly get through the first poem when the vomiting begins..." }, { type = "addFlag", flag = { type = "simple", name = "read-vogon-poetry" } }, { type = "addFlag", flag = { type = "simple", name = "status:nauseated" } }, { type = "awardPoints", amount = -1 }]
# trigger [Status] Bad Breath (source line 66)
[[triggers]]
name = "[Status] Bad Breath"
conditions = [{ type = "hasFlag", flag = "status:bad-breath" }, { type = "chance", one_in = 5.0 }]
actions = [{ type = "spinnerMessage", spinner = "bad-breath" }]
# trigger [Global] Arson-Aid Used (source line 33)
[[triggers]]
name = "[Global] Arson-Aid Used"
only_once = true
conditions = [{ type = "useItem", item_id = "arson_aid", ability = "ignite" }]
actions = [{ type = "showMessage", text = "The Initech Arson-Aid melts down into an amorphous, hissing blob. As expected." }]
# trigger [Hint] Towel / Plaque-1 Hint (source line 73)
[[triggers]]
name = "[Hint] Towel / Plaque-1 Hint"
only_once = true
conditions = [{ type = "take", item_id = "towel" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-towel" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "NOW you're a frood who really \"knows where his towel is\"!" }, { type = "scheduleInIf", turns_ahead = 10, condition = { all = [{ type = "hasItem", item_id = "towel" }, { type = "missingFlag", flag = "read-plaque-1" }, { type = "hasFlag", flag = "tried-read-plaque-1" }] }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "Towels can be awfully handy for cleaning grimy things. Just sayin'." }], note = "hint: towels can clean things" }]
# trigger [Global] Fishing Line (attach clip to floss) (source line 136)
[[triggers]]
name = "[Global] Fishing Line (attach clip to floss)"
conditions = [{ type = "useItemOnItem", interaction = "attach", target_id = "dental_floss", tool_id = "paper_clip" }]
actions = [{ type = "despawnItem", item_id = "paper_clip" }, { type = "despawnItem", item_id = "dental_floss" }, { type = "spawnItemInInventory", item_id = "fishing_line" }, { type = "showMessage", text = "You MacGyvered the floss and paper clip into a fishing line!" }, { type = "awardPoints", amount = 3 }]
# trigger [Global] Fishing Line (attach floss to clip) (source line 145)
[[triggers]]
name = "[Global] Fishing Line (attach floss to clip)"
conditions = [{ type = "useItemOnItem", interaction = "attach", target_id = "paper_clip", tool_id = "dental_floss" }]
actions = [{ type = "despawnItem", item_id = "paper_clip" }, { type = "despawnItem", item_id = "dental_floss" }, { type = "spawnItemInInventory", item_id = "fishing_line" }, { type = "showMessage", text = "You MacGyvered the floss and paper clip into a fishing line!" }, { type = "awardPoints", amount = 3 }]
