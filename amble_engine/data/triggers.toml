# Generated by amble_script from amble_script/data/Amble (6 files)
# Do not edit: this file is compiled from DSL.
# Source Hash (fnv64): c9f936b6b2908095

# trigger High-Ridge: Read Scrawled Note (source line 10)
[[triggers]]
name = "High-Ridge: Read Scrawled Note"
only_once = true
conditions = [{ type = "useItem", item_id = "scrawled_note", ability = "read" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-scrawled-note" } }]
# trigger High-Ridge: Plaque 1 Too Grimy to Read (source line 14)
[[triggers]]
name = "High-Ridge: Plaque 1 Too Grimy to Read"
conditions = [{ type = "useItem", item_id = "plaque_1", ability = "read" }, { type = "missingFlag", flag = "cleaned-plaque-1" }]
actions = [{ type = "denyRead", reason = "The plaque is too grimy to make out the words. You'll need to find a way to clean it off." }, { type = "addFlag", flag = { type = "simple", name = "tried-read-plaque-1" } }]
# trigger High-Ridge: Plaque 1 Cleaned (source line 21)
[[triggers]]
name = "High-Ridge: Plaque 1 Cleaned"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "plaque_1", action = "clean" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "cleaned-plaque-1" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "With some saliva and a little effort, you're able to remove the grime and bring the plaque to a dull shine." }]
# trigger High Ridge: Read Cleaned Plaque 1 (source line 27)
[[triggers]]
name = "High Ridge: Read Cleaned Plaque 1"
only_once = true
conditions = [{ type = "useItem", item_id = "plaque_1", ability = "read" }, { type = "hasFlag", flag = "cleaned-plaque-1" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "read-plaque-1" } }, { type = "awardPoints", amount = 5 }]
# trigger High-Ridge: Billy Wakes Up (source line 34)
[[triggers]]
name = "High-Ridge: Billy Wakes Up"
only_once = true
conditions = [{ type = "useItem", item_id = "scrawled_note", ability = "read" }, { type = "chance", one_in = 2.380952380952381 }]
actions = [{ type = "showMessage", text = "You feel a deep rumbling coming up through your feet. Suddenly, a voice booms through the trees and the canyon below: \"WARNING: SELF-DESTRUCT SEQUENCE INITIATED! All personnel evacuate immediately! Demolition commences on REL 10!\"" }, { type = "addFlag", flag = { type = "simple", name = "self-destruct-armed" } }, { type = "scheduleOn", on_turn = 10, actions = [{ type = "showMessage", text = "KABOOM! 💥 The entire area shakes violently as a deep rumbling rocks the mountain!" }], note = "self-destruct fires" }, { type = "scheduleOn", on_turn = 11, actions = [{ type = "showMessage", text = "The rumbling stops. Then, after a minute, the voice again: \"Erm, it turns out that was just Billy waking up. Cancel the evacuation, and have a productive day.\"" }, { type = "removeFlag", flag = "self-destruct-armed" }, { type = "awardPoints", amount = 2 }, { type = "addFlag", flag = { type = "simple", name = "survived-fake-explosion" } }], note = "lol just Billy" }]
# trigger High-Ridge: Gnat Punctuation (source line 52)
[[triggers]]
name = "High-Ridge: Gnat Punctuation"
only_once = true
conditions = [{ type = "leave", room_id = "high-ridge" }]
actions = [{ type = "scheduleInIf", turns_ahead = 2, condition = { type = "missingFlag", flag = "read-scrawled-note" }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "A cloud of gnats drifts by, forming the shapes of the words \"rEAd tHe HiGh RidGe NotE\"." }], note = "gnats: first fly-by" }, { type = "scheduleInIf", turns_ahead = 2, condition = { type = "hasFlag", flag = "read-scrawled-note" }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "A cloud of gnats drifts by, lazily holding the shape of \"..?..\"." }], note = "gnats: first fly-by" }, { type = "scheduleIn", turns_ahead = 6, actions = [{ type = "showMessage", text = "The gnat cloud zips past in the other direction, this time shaped like \"!!!\"." }], note = "gnats: alarmed" }]
# trigger Two-Sheds-Landing: Cut or Chop Tree (source line 69)
[[triggers]]
name = "Two-Sheds-Landing: Cut or Chop Tree"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "fallen_tree", action = "cut" }]
actions = [{ type = "showMessage", text = "With considerable effort and just one blister, you're able to chop a path through the branches. The stone steps continue to curve upward from here." }, { type = "despawnItem", item_id = "fallen_tree" }, { type = "addFlag", flag = { type = "simple", name = "cleared-fallen-tree" } }, { type = "addFlag", flag = { type = "simple", name = "chopped-fallen-tree" } }, { type = "awardPoints", amount = 5 }]
# trigger Two-Sheds-Landing: Arson-Aid Used on Tree (source line 77)
[[triggers]]
name = "Two-Sheds-Landing: Arson-Aid Used on Tree"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "burn", target_id = "fallen_tree", tool_id = "flamethrower" }]
actions = [{ type = "showMessage", text = "You aim the Arson-Aid and begin to squeeze the trigger when the device erupts into a fireball! Panicking, you throw the whole Arson-Aid into the tree." }]
# trigger Two-Sheds-Landing: Burn Tree (source line 82)
[[triggers]]
name = "Two-Sheds-Landing: Burn Tree"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "fallen_tree", action = "burn" }]
actions = [{ type = "despawnItem", item_id = "fallen_tree" }, { type = "addFlag", flag = { type = "simple", name = "cleared-fallen-tree" } }, { type = "addFlag", flag = { type = "simple", name = "burned-fallen-tree" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "WHOOOOOMPH! The fallen tree erupts into flame and, quite improbably, is reduced to ash in mere seconds." }]
# trigger Guard-Post: Traveling Without Towel (source line 92)
[[triggers]]
name = "Guard-Post: Traveling Without Towel"
only_once = true
conditions = [{ type = "enter", room_id = "guard-post" }, { type = "missingItem", item_id = "towel" }]
actions = [{ type = "showMessage", text = "You pause here, realizing with increasing concern that you are traveling without a towel." }]
# trigger East-of-Building: Pluck Dental Floss (source line 100)
[[triggers]]
name = "East-of-Building: Pluck Dental Floss"
only_once = true
conditions = [{ type = "take", item_id = "dental_floss" }]
actions = [{ type = "showMessage", text = "You pluck a strand of floss from the bush. It comes away easily — disturbingly so. Minty. Strong. Too strong. You’re no botanist, but you’re pretty sure this shouldn’t be growing out of a shrubbery." }, { type = "awardPoints", amount = 5 }, { type = "setItemDescription", item_sym = "weird_bush", text = "A squat, leafy bush now stripped of its floss-like strands, bare branches jutting out awkwardly. A small sign next to it reads 'Pride of Montana'." }]
# trigger Loading-Dock: Spawn Special Delivery (source line 108)
[[triggers]]
name = "Loading-Dock: Spawn Special Delivery"
only_once = true
conditions = [{ type = "leave", room_id = "loading-dock" }]
actions = [{ type = "spawnItemInRoom", item_id = "delivery_box", room_id = "loading-dock" }, { type = "showMessage", text = "You hear a thud behind you, back toward the dock, like something was just dropped off. You glimpse a drone flying away quickly, as if hoping not to be seen. Was that an Initech logo on the side?" }]
# trigger Loading-Dock: Open Security Crate (Key) (source line 113)
[[triggers]]
name = "Loading-Dock: Open Security Crate (Key)"
only_once = true
conditions = [{ type = "unlock", item_id = "security_crate" }]
actions = [{ type = "spawnItemInContainer", item_id = "crowbar", container_id = "security_crate" }, { type = "spawnItemInContainer", item_id = "security_log", container_id = "security_crate" }, { type = "spawnItemInContainer", item_id = "glass_vial", container_id = "security_crate" }, { type = "spawnItemInContainer", item_id = "initech_mug", container_id = "security_crate" }, { type = "addFlag", flag = { type = "simple", name = "unlocked-security-crate" } }, { type = "showMessage", text = "The ear wax on the tip of the key eases it into the rusted lock, which snaps open with a satisfying clunk." }]
# trigger Loading-Dock: Open Security Crate (Break) (source line 122)
[[triggers]]
name = "Loading-Dock: Open Security Crate (Break)"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "security_crate", action = "break" }, { type = "missingFlag", flag = "unlocked-security-crate" }]
actions = [{ type = "despawnItem", item_id = "security_crate" }, { type = "spawnItemCurrentRoom", item_id = "crowbar" }, { type = "spawnItemCurrentRoom", item_id = "security_log" }, { type = "spawnItemCurrentRoom", item_id = "shattered_vial" }, { type = "spawnItemCurrentRoom", item_id = "initech_mug" }, { type = "showMessage", text = "With a few hefty blows, you manage to break the lock haft completely off of the security locker -- well after a few misses had already caved in the lid and destroyed it, but you were having fun. It looks like you broke a couple of the items that were inside in the process." }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA Announcement: 'Someone broke into the security locker on the dock. Mind your belongings and report any suspicious activity to security.'" }]
# trigger Loading-Dock: Open Security Crate (Burn) (source line 134)
[[triggers]]
name = "Loading-Dock: Open Security Crate (Burn)"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "security_crate", action = "burn" }, { type = "missingFlag", flag = "unlocked-security-crate" }]
actions = [{ type = "despawnItem", item_id = "security_crate" }, { type = "spawnItemCurrentRoom", item_id = "crowbar" }, { type = "spawnItemCurrentRoom", item_id = "burned_security_log" }, { type = "spawnItemCurrentRoom", item_id = "glass_vial" }, { type = "spawnItemCurrentRoom", item_id = "initech_mug" }, { type = "showMessage", text = "WHOOOOOMP! The locker, which you now realize may have been made from the solid magnesium magnolia trees of Siwenna, goes up in a white hot flash -- taking your eyebrows with it. It looks like *some* of the items inside weren't flammable." }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA Announcement: 'Someone used an Arson-Aid to torch the security locker at the loading dock. An investigation is underway. Report anyone with scorched clothes or missing eyebrows to security.'" }]
# trigger Loading-Dock: Got Crowbar (source line 146)
[[triggers]]
name = "Loading-Dock: Got Crowbar"
only_once = true
conditions = [{ type = "take", item_id = "crowbar" }]
actions = [{ type = "showMessage", text = "You feel like Gordon Freeman now, and wonder if maybe Barney's on security here?" }, { type = "addFlag", flag = { type = "simple", name = "got-crowbar" } }, { type = "awardPoints", amount = 3 }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "... and then you wonder why you're thinking of Barney as a real person instead of a character in a game. And Gordon, for that matter. Wait, he was just *fiction*, right? Come to think of it, you feel a little unsure of reality, and it's worse the nearer you are to the building." }], note = "notice fiction bleed" }]
# trigger Gonk Droid: Battery Exchange (source line 159)
[[triggers]]
name = "Gonk Droid: Battery Exchange"
only_once = true
conditions = [{ type = "giveToNpc", item_id = "empty_battery", npc_id = "gonk_droid" }]
actions = [{ type = "awardPoints", amount = 2 }, { type = "giveItemToPlayer", npc_id = "gonk_droid", item_id = "charged_battery" }, { type = "setNpcState", npc_id = "gonk_droid", state = "happy" }, { type = "showMessage", text = "Elated that you've given it such a large, empty battery to charge, the gonk droid gives you a fully charged one, free of ... charge?" }]
# trigger Gonk Droid: Happy When Family Photo Inspected (source line 166)
[[triggers]]
name = "Gonk Droid: Happy When Family Photo Inspected"
only_once = true
conditions = [{ type = "lookAt", item_id = "gonk_family_photo" }]
actions = [{ type = "npcSays", npc_id = "gonk_droid", quote = "GONK gonk!" }, { type = "showMessage", text = "The gonk droid totters with pride as you view its family photo." }, { type = "awardPoints", amount = 2 }, { type = "addFlag", flag = { type = "simple", name = "made-gonk-proud" } }]
# trigger Main-Lobby: Security Reminder (source line 173)
[[triggers]]
name = "Main-Lobby: Security Reminder"
only_once = true
conditions = [{ type = "enter", room_id = "main-lobby" }]
actions = [{ type = "scheduleInIf", turns_ahead = 3, condition = { type = "inRoom", room_id = "main-lobby" }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "A chime echoes through the lobby. \"Candidates: Please do not loiter in the lobby,\" intones an overhead voice." }, { type = "awardPoints", amount = -1 }], note = "lobby loitering reminder" }]
# trigger Main-Lobby: Spot HAL Module #2 / Start Puzzle (source line 191)
[[triggers]]
name = "Main-Lobby: Spot HAL Module #2 / Start Puzzle"
only_once = true
conditions = [{ type = "lookAt", item_id = "vending_machine" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "found-module-2" } }, { type = "addFlag", flag = { type = "sequence", name = "module-2-puzzle", end = 2 } }]
# trigger Main-Lobby: Pry Vending Machine Open with Crowbar (source line 203)
[[triggers]]
name = "Main-Lobby: Pry Vending Machine Open with Crowbar"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "open", target_id = "vending_machine", tool_id = "crowbar" }]
actions = [{ type = "showMessage", text = """
With a mighty heave and several creative applications of leverage that would make Archimedes proud, you pry open the vending machine. There's a satisfying CRACK as the lock mechanism gives way. Unfortunately, your vigorous prying causes the machine to tilt forward slightly, and you watch in horror as the HAL module slides off its shelf and disappears into a narrow crevice between the machine and the floor. The other items tumble onto the floor around you.

The machine's internal speaker crackles to life one last time: 'Thank you for choosing violence. Have a mediocre day.'""" }, { type = "advanceFlag", flag = "module-2-puzzle" }, { type = "replaceDropItem", old_sym = "hal_module_2", new_sym = "hal_module_2_crevice" }, { type = "replaceDropItem", old_sym = "dehydrated_water", new_sym = "dehydrated_water" }, { type = "replaceDropItem", old_sym = "schrodingers_sandwich", new_sym = "schrodingers_sandwich" }, { type = "replaceDropItem", old_sym = "fortune_cookie_of_doom", new_sym = "fortune_cookie_of_doom" }, { type = "addFlag", flag = { type = "simple", name = "vending-machine-pried" } }, { type = "addFlag", flag = { type = "simple", name = "hal-module-in-crevice" } }, { type = "setItemDescription", item_sym = "vending_machine", text = "A battered and broken vending machine -- even more so since you took a crowbar to it. Miraculously, the glass still remains intact on the front panel which has been pried open and hangs on a slant. Empty now, the machine's contents have all spilled out on the floor." }, { type = "awardPoints", amount = 5 }]
# trigger Main-Lobby: Fish HAL Module Out of Crevice (source line 218)
[[triggers]]
name = "Main-Lobby: Fish HAL Module Out of Crevice"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "hal_module_2_crevice", tool_id = "fishing_line" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "You carefully lower your makeshift fishing line into the crevice where the HAL module fell. After several attempts and some creative swearing, you manage to hook the module with the paper clip. You slowly, carefully pull it up, holding your breath the entire time. Success! The module is yours, though it's now covered in dust and what might be ancient gum." }, { type = "despawnItem", item_id = "hal_module_2_crevice" }, { type = "setItemDescription", item_sym = "hal_module_2", text = "Second in the trio of HAL's missing memory modules. Its red LED pulses gently, like a heartbeat—or a warning. Its case was cracked during retrieval from the vending machine and floor crevice, but it still seems serviceable." }, { type = "spawnItemInInventory", item_id = "hal_module_2" }, { type = "awardPoints", amount = 10 }, { type = "addFlag", flag = { type = "simple", name = "hal-module-2-retrieved" } }, { type = "advanceFlag", flag = "module-2-puzzle" }]
# trigger Main-Lobby: Can't Reach HAL Module in Crevice (source line 232)
[[triggers]]
name = "Main-Lobby: Can't Reach HAL Module in Crevice"
conditions = [{ type = "take", item_id = "hal_module_2_crevice" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "The HAL module has fallen deep into a narrow crevice between the vending machine and the floor. You try to reach it with your hand, but the gap is too narrow. Your fingers can just barely brush against the module, pushing it slightly further away. You're going to need some kind of fishing tool to retrieve it." }]
# trigger Main-Lobby: HAL Module/Drop Tweezers In Crevice (source line 240)
[[triggers]]
name = "Main-Lobby: HAL Module/Drop Tweezers In Crevice"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "hal_module_2_crevice", tool_id = "zircon_tweezers" }, { type = "hasFlag", flag = "module-2-puzzle#1" }]
actions = [{ type = "showMessage", text = "The glint of the zircon-encrusted tweezers is truly something to behold, but the tweezers are too short to reach the memory module. In fact, in trying to reach that far into the crack with them, the tweezers slip from your fingers and fall into the crevice too." }, { type = "replaceDropItem", old_sym = "zircon_tweezers", new_sym = "zircon_tweezers_crevice" }, { type = "addFlag", flag = { type = "simple", name = "lost-Tweezers" } }, { type = "awardPoints", amount = -2 }]
# trigger Main-Lobby: Recover Tweezers (source line 251)
[[triggers]]
name = "Main-Lobby: Recover Tweezers"
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "zircon_tweezers_crevice", tool_id = "fishing_line" }]
actions = [{ type = "showMessage", text = "After a dozen tries and venting by beating the vending machine with the crowbar some more, you are able to fish your prized zircon-encrusted tweezers back out of the crevice." }, { type = "despawnItem", item_id = "zircon_tweezers_crevice" }, { type = "spawnItemInInventory", item_id = "zircon_tweezers" }, { type = "addFlag", flag = { type = "simple", name = "recovered-tweezers" } }, { type = "awardPoints", amount = 3 }]
# trigger Patio: Sunglasses Required (source line 263)
[[triggers]]
name = "Patio: Sunglasses Required"
conditions = [{ type = "enter", room_id = "patio" }, { type = "missingItem", item_id = "peril_sunglasses" }]
actions = [{ type = "pushPlayerTo", room_id = "restaurant" }, { type = "showMessage", text = "A blinding burst of light erupts from the swirling starfield, forcing you to shield your eyes. With no protection, you're driven back into the relative safety of the restaurant." }]
# trigger Patio: Have Sunglasses (source line 270)
[[triggers]]
name = "Patio: Have Sunglasses"
conditions = [{ type = "enter", room_id = "patio" }, { type = "hasItem", item_id = "peril_sunglasses" }]
actions = [{ type = "showMessage", text = "Sensing the possible harm in eating a dessert a stone's throw away from the explosions of all nearby stars, your peril-sensitive sunglasses flash nearly completely opaque, allowing you to see without permanent damage to the retina as the galaxies outside continue to erupt." }]
# trigger Patio: Award Points Getting In (source line 276)
[[triggers]]
name = "Patio: Award Points Getting In"
only_once = true
conditions = [{ type = "enter", room_id = "patio" }, { type = "hasItem", item_id = "peril_sunglasses" }]
actions = [{ type = "awardPoints", amount = 2 }]
# trigger Office: Receptionist Unhelpful if No Pass (source line 285)
[[triggers]]
name = "Office: Receptionist Unhelpful if No Pass"
conditions = [{ type = "withNpc", npc_id = "b_a_receptionist" }, { type = "missingFlag", flag = "got-visitor-pass" }, { type = "missingFlag", flag = "got-elevator-keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "normal" }]
# trigger Office: Receptionist Helpful Once Pass Acquired (source line 291)
[[triggers]]
name = "Office: Receptionist Helpful Once Pass Acquired"
conditions = [{ type = "withNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "got-visitor-pass" }, { type = "missingFlag", flag = "got-elevator-keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "happy" }]
# trigger Office: Exchange Invitation for Visitor Pass (source line 297)
[[triggers]]
name = "Office: Exchange Invitation for Visitor Pass"
conditions = [{ type = "giveToNpc", item_id = "invitation", npc_id = "b_a_receptionist" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-visitor-pass" } }, { type = "despawnItem", item_id = "invitation" }, { type = "spawnItemInInventory", item_id = "visitor_pass" }, { type = "awardPoints", amount = 5 }, { type = "setNpcState", npc_id = "b_a_receptionist", state = "happy" }, { type = "showMessage", text = """
The robotic receptionist initially glances at you with the disdain of someone who spends all day waiting on people who are waiting on someone else, but her demeanor and even appearance immediately become pleasant when she sees the invitation in your hand. She deftly takes it from you, scrutinizes it intently, and slips it into a desktop document vaporizer.

She then hands you a laminated card on a lanyard. It appears blank, yet also appears to show a variety of credentials at the same time.""" }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "Here is your visitor pass. Much of the facility will be inaccessible without it, so treat it like a second towel." }]
# trigger Office: Open Poetry Performer (source line 307)
[[triggers]]
name = "Office: Open Poetry Performer"
conditions = [{ type = "open", item_id = "poetry_performer" }]
actions = [{ type = "showMessage", text = """
The machine clicks on and hums. A flashing red light warns:
            ⚠️ NOT FOR USE WITH VOGON POETRY ⚠️""" }]
# trigger Office: Insert Poems to Open Panic Room (source line 311)
[[triggers]]
name = "Office: Insert Poems to Open Panic Room"
only_once = true
conditions = [{ type = "insert", item_id = "vogon_poetry_book", container_id = "poetry_performer" }]
actions = [{ type = "awardPoints", amount = 5 }, { type = "despawnItem", item_id = "vogon_poetry_book" }, { type = "addFlag", flag = { type = "simple", name = "panic-room-open" } }, { type = "revealExit", exit_from = "b-a-office", exit_to = "poetry-panic", direction = "west" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "PA announcement: Vogon poetry has been detected in the building. If you are experiencing nausea, go to med bay for assistance." }, { type = "showMessage", text = """
The machine begins to whine at a high pitch and gives off a noxious odor of burning hair. A klaxon blares and the display warns:

            ⚠️ VOGON INPUT DETECTED - POETRY PANIC ROOM UNLOCKED ⚠️
               ☣ VAPORIZING VOGON INPUT - AVOID TOXIC FUMES ☣

The whiteboard on the west wall slides to the side, revealing a vault-like door.""" }]
# trigger Office: Gifted Lost and Found Key (source line 320)
[[triggers]]
name = "Office: Gifted Lost and Found Key"
only_once = true
conditions = [{ type = "enter", room_id = "b-a-office" }, { type = "hasFlag", flag = "got-elevator-keycard" }, { type = "withNpc", npc_id = "b_a_receptionist" }]
actions = [{ type = "giveItemToPlayer", npc_id = "b_a_receptionist", item_id = "lost_and_found_key" }, { type = "showMessage", text = "Seeing you return with the keycard, the receptionist looks around warily and slips something into your hand, then looks directly at the lost and found box." }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "Finally! A Candidate bright enough to get to that keycard. I guess I lost the pool. Who'd have thought it'd be a primate?" }, { type = "npcSays", npc_id = "b_a_receptionist", quote = "(*whispers*) Use this before you head down to AA-3B." }]
# trigger Office: Lost and Found Unlocked (source line 329)
[[triggers]]
name = "Office: Lost and Found Unlocked"
only_once = true
conditions = [{ type = "unlock", item_id = "lost_and_found_box" }]
actions = [{ type = "awardPoints", amount = 3 }, { type = "addFlag", flag = { type = "simple", name = "lost-and-found-opened" } }, { type = "setItemDescription", item_sym = "lost_and_found_box", text = "A sturdy metal lockbox marked 'Lost and Found'. Its lid is cracked slightly open." }]
# trigger Office: Receptionist Comment (Read Poetry) (source line 335)
[[triggers]]
name = "Office: Receptionist Comment (Read Poetry)"
only_once = true
conditions = [{ type = "hasFlag", flag = "read-vogon-poetry" }, { type = "hasFlag", flag = "status:nauseated" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "You look ill. You didn't read that poetry book, did you? That won't look good on your evaluation. The Emergency Medical Hologram on level AA-3 may be able to help." }]
# trigger Office: Receptionist Comment (Broken Emitter Found) (source line 341)
[[triggers]]
name = "Office: Receptionist Comment (Broken Emitter Found)"
conditions = [{ type = "enter", room_id = "b-a-office" }, { type = "withNpc", npc_id = "b_a_receptionist" }, { type = "hasFlag", flag = "mobilize-emh#0" }]
actions = [{ type = "npcSays", npc_id = "b_a_receptionist", quote = "I hear the EMH lost his emitter again. One has been turned into the Lost and Found, but I'm not sure how much good it will do you. Or him." }]
# trigger Poetry-Panic: Acquired Elevator Keycard (source line 349)
[[triggers]]
name = "Poetry-Panic: Acquired Elevator Keycard"
only_once = true
conditions = [{ type = "take", item_id = "elevator_keycard" }]
actions = [{ type = "setNpcState", npc_id = "b_a_receptionist", state = "bored" }, { type = "addFlag", flag = { type = "simple", name = "got-elevator-keycard" } }]
# trigger Lounge: Rug Taken / Reveal Trapdoor (source line 356)
[[triggers]]
name = "Lounge: Rug Taken / Reveal Trapdoor"
only_once = true
conditions = [{ type = "take", item_id = "lebowski_rug" }]
actions = [{ type = "revealExit", exit_from = "lounge", exit_to = "portal-room", direction = "down" }, { type = "addFlag", flag = { type = "simple", name = "found-portal-room" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "Light shines around the edges of a trap door revealed in the floor when you remove the rug. The room no longer seems tied together." }]
# trigger Lounge: Rug Burned Away (source line 363)
[[triggers]]
name = "Lounge: Rug Burned Away"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "lebowski_rug", action = "burn" }]
actions = [{ type = "despawnItem", item_id = "lebowski_rug" }, { type = "revealExit", exit_from = "lounge", exit_to = "portal-room", direction = "down" }, { type = "addFlag", flag = { type = "simple", name = "found-portal-room" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "When the acrid smoke clears and your eyes stop burning, you can make out a trap door revealed in the floor where the rug used to be." }]
# trigger Lounge: Brew Coffee (source line 371)
[[triggers]]
name = "Lounge: Brew Coffee"
only_once = true
conditions = [{ type = "useItem", item_id = "coffee_machine", ability = "turnOn" }]
actions = [{ type = "showMessage", text = "The coffee machine hums to life and begins its brewing cycle. A timer shows 3 minutes remaining..." }, { type = "setItemDescription", item_sym = "coffee_machine", text = "A single serve drip coffee machine, which apparently takes quite a while to finish brewing a cup one drip at a time..." }, { type = "scheduleIn", turns_ahead = 3, actions = [{ type = "setItemDescription", item_sym = "coffee_machine", text = "A single serve, drip coffee maker. The brew cycle is complete and the grounds have already been used." }, { type = "showMessage", text = "♪ BEEP BEEP BEEP! ♪ The coffee machine chimes cheerfully. The rich aroma of freshly brewed coffee fills the air." }, { type = "spawnItemInRoom", item_id = "hot_coffee", room_id = "lounge" }, { type = "addFlag", flag = { type = "simple", name = "coffee-brewed" } }, { type = "awardPoints", amount = 2 }], note = "coffee done brewing" }]
# trigger Lounge: Coffee Taken (source line 385)
[[triggers]]
name = "Lounge: Coffee Taken"
conditions = [{ type = "take", item_id = "hot_coffee" }]
actions = [{ type = "removeFlag", flag = "coffee-brewed" }]
# trigger Lift-Bank-Main: Keycard Activates Elevator (source line 394)
[[triggers]]
name = "Lift-Bank-Main: Keycard Activates Elevator"
conditions = [{ type = "enter", room_id = "lift-bank-main" }, { type = "hasItem", item_id = "elevator_keycard" }]
actions = [{ type = "showMessage", text = "The keycard in your pack chirps twice as you approach the proximity reader on the wall, which responds with a happy melody." }]
# trigger Lift-Bank-Main: Point Award On First Activation (source line 400)
[[triggers]]
name = "Lift-Bank-Main: Point Award On First Activation"
only_once = true
conditions = [{ type = "enter", room_id = "lift-bank-main" }, { type = "hasItem", item_id = "elevator_keycard" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "elevator-activated" } }, { type = "showMessage", text = "The main lift lights up, and Muzak plays over a tinny speaker inside. In horror, you realize: It's Porcupine Tree's 'The Sound of Muzak' -- the Muzak version." }, { type = "awardPoints", amount = 3 }]
# trigger Portal-Room: Gun Opened (source line 410)
[[triggers]]
name = "Portal-Room: Gun Opened"
only_once = true
conditions = [{ type = "open", item_id = "portal_gun" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "portal-gun-opened" } }]
# trigger Portal-Room: Gun Powered (source line 415)
[[triggers]]
name = "Portal-Room: Gun Powered"
conditions = [{ type = "insert", item_id = "charged_battery", container_id = "portal_gun" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "portal-gun-powered" } }, { type = "awardPoints", amount = 3 }, { type = "restrictItem", item_id = "charged_battery" }, { type = "setItemDescription", item_sym = "portal_gun", text = "A black and white Portal gun sits bolted to its pedestal, aimed at a target on the wall. A fused battery juts from the compartment and the power indicator glows steadily green." }, { type = "showMessage", text = "Arcing wildly as you insert it, the fully charged 20 KV battery fuses itself to the contacts inside the portal gun -- when then emits a quick high-pitched whine. The POWER indicator lights a steady green." }]
# trigger Portal-Room: Gun Fired / Open Portal (source line 423)
[[triggers]]
name = "Portal-Room: Gun Fired / Open Portal"
only_once = true
conditions = [{ type = "useItem", item_id = "portal_gun", ability = "turnOn" }, { type = "hasFlag", flag = "portal-gun-powered" }]
actions = [{ type = "revealExit", exit_from = "portal-room", exit_to = "aperture-lab", direction = "portal" }, { type = "addFlag", flag = { type = "simple", name = "portal-opened" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "A loud SQUIP! comes from the gun when you turn it on. The wall in front of it sizzles for a moment, and then a crackling oval blue portal expands on the wall to reveal a laboratory space on the other side." }]
# trigger Portal-Room: Tried Gun Without Power (source line 432)
[[triggers]]
name = "Portal-Room: Tried Gun Without Power"
conditions = [{ type = "useItem", item_id = "portal_gun", ability = "turnOn" }, { type = "missingFlag", flag = "portal-gun-powered" }]
actions = [{ type = "showMessage", text = "You attempt to turn the portal gun on, but the POWER light briefly flashes red, then goes dark. Nothing else happens." }]
# trigger Aperture-Lab: Printer Burns Paper (source line 440)
[[triggers]]
name = "Aperture-Lab: Printer Burns Paper"
conditions = [{ type = "useItem", item_id = "lab_printer", ability = "turnOn" }, { type = "containerHasItem", container_id = "lab_printer", item_id = "printer_paper" }]
actions = [{ type = "despawnItem", item_id = "printer_paper" }, { type = "addFlag", flag = { type = "simple", name = "burned-invitation" } }, { type = "spawnItemInRoom", item_id = "burnt_invitation", room_id = "aperture-lab" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "An annoyed voice on the PA: ATTENTION Staff - do NOT use regular copy paper in the lab PlasmaJet printer, or we will be shut down again -- by order of FEMA, PETA, the ATF, FBI, and our HOA." }, { type = "showMessage", text = "The paper ignites in a flash, and the PlasmaJet spits the flaming fragments of a document on the floor at your feet." }, { type = "showMessage", text = "A nearby smoke detector alarms briefly, the quits with an exasperated sigh when it sees you near the printer, surrounded by smoldering confetti." }]
# trigger Aperture-Lab: Print Invitation on Asbestos (source line 451)
[[triggers]]
name = "Aperture-Lab: Print Invitation on Asbestos"
only_once = true
conditions = [{ type = "useItem", item_id = "lab_printer", ability = "turnOn" }, { type = "containerHasItem", container_id = "lab_printer", item_id = "asbestos_sheet" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "invitation-sans-ignition" } }, { type = "awardPoints", amount = 10 }, { type = "despawnItem", item_id = "asbestos_sheet" }, { type = "showMessage", text = "The PlasmaJet emits a blinding flash of light, leaving a printer-shaped purple blob in your visual field and blinding you for a few moments." }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "spawnItemInRoom", item_id = "invitation", room_id = "aperture-lab" }, { type = "showMessage", text = "Your vision begins to clear, and you see an engraved invitation on the floor. It glows slightly, and waves of heat warp the air around it." }], note = "blindness clears" }]
# trigger Aperture-Lab: FoamSafe Misfire (source line 464)
[[triggers]]
name = "Aperture-Lab: FoamSafe Misfire"
only_once = true
conditions = [{ type = "useItemOnItem", interaction = "extinguish", target_id = "burnt_invitation", tool_id = "foamsafe_x17" }]
actions = [{ type = "despawnItem", item_id = "foamsafe_x17" }, { type = "showMessage", text = "You spray the foam onto the burning invitation. Instead of dousing the flame, the foam flares up into a spectacular fireball!" }, { type = "addFlag", flag = { type = "sequence", name = "foam-fire-in-lab", end = 3 } }, { type = "scheduleIn", turns_ahead = 2, actions = [{ type = "showMessage", text = "The foam fire accelerates, as it turns into a hissing, popping ball of goo spitting off little globs of flaming napalm!" }, { type = "advanceFlag", flag = "foam-fire-in-lab" }], note = "foam fire starts" }, { type = "scheduleIn", turns_ahead = 3, actions = [{ type = "showMessage", text = "The fire alarm begins to wail as the flames spread through the lab and the sprinklers turn on, pushing you back toward the portal to escape!" }, { type = "advanceFlag", flag = "foam-fire-in-lab" }, { type = "addFlag", flag = { type = "simple", name = "lab-fire-raging" } }, { type = "pushPlayerTo", room_id = "portal-room" }], note = "foam fire spreads" }, { type = "scheduleIn", turns_ahead = 8, actions = [{ type = "showMessage", text = "The alarms stop. The fire in the Aperture lab has been extinguised. Hopefully nobody saw you light it, you monster." }, { type = "advanceFlag", flag = "foam-fire-in-lab" }, { type = "removeFlag", flag = "lab-fire-raging" }, { type = "awardPoints", amount = 5 }], note = "foam fire out" }]
# trigger Aperture-Lab: Can't Enter While Lab On Fire (source line 486)
[[triggers]]
name = "Aperture-Lab: Can't Enter While Lab On Fire"
conditions = [{ type = "enter", room_id = "aperture-lab" }, { type = "flagInProgress", flag = "foam-fire-in-lab" }]
actions = [{ type = "showMessage", text = "You try to get back into the lab, but the flames and oily smoke from the foam fire drive you back through the portal within seconds." }, { type = "pushPlayerTo", room_id = "portal-room" }]
# trigger Aperture-Lab: Insulate With Towel (source line 493)
[[triggers]]
name = "Aperture-Lab: Insulate With Towel"
conditions = [{ type = "useItemOnItem", interaction = "handle", target_id = "invitation", tool_id = "towel" }]
actions = [{ type = "showMessage", text = "You wrap your towel around the still-piping-hot invitation to grasp it, suffering only minor burns in the process." }]
# trigger Aperture-Lab: Handle/Take Invitation with Towel (source line 497)
[[triggers]]
name = "Aperture-Lab: Handle/Take Invitation with Towel"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "invitation", action = "handle" }]
actions = [{ type = "despawnItem", item_id = "invitation" }, { type = "spawnItemInInventory", item_id = "invitation" }, { type = "addFlag", flag = { type = "simple", name = "got-invitation" } }, { type = "awardPoints", amount = 5 }, { type = "showMessage", text = "Using your towel as insulation, you're able to wrangle the still-hot invitation into your pack." }]
# trigger Aperture-Lab: Drop Invitation Without Insulation (source line 505)
[[triggers]]
name = "Aperture-Lab: Drop Invitation Without Insulation"
conditions = [{ type = "take", item_id = "invitation" }]
actions = [{ type = "replaceDropItem", old_sym = "invitation", new_sym = "invitation" }, { type = "showMessage", text = "You burn your fingers and drop the invitation on the floor. It emits a reddish glow, and shimmers from the radiating heat." }]
# trigger Sublevel-1-Entrance: Arrived (source line 511)
[[triggers]]
name = "Sublevel-1-Entrance: Arrived"
only_once = true
conditions = [{ type = "enter", room_id = "sublevel-1-entrance" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "entered-sublevel-1" } }]
# trigger Sublevel-1-Entrance: Refuse Visitor Pass (source line 515)
[[triggers]]
name = "Sublevel-1-Entrance: Refuse Visitor Pass"
conditions = [{ type = "giveToNpc", item_id = "visitor_pass", npc_id = "black_knight" }]
actions = [{ type = "npcRefuseItem", npc_id = "black_knight", reason = "Ha! You may be Arthur, King of the Britons... but I said NONE shall pass. Surely you speak the King's English!" }]
# trigger Sublevel-1-Entrance: Meet the Black Knight (source line 519)
[[triggers]]
name = "Sublevel-1-Entrance: Meet the Black Knight"
only_once = true
conditions = [{ type = "talkToNpc", npc_id = "black_knight" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "talked-to-knight" } }, { type = "npcSays", npc_id = "black_knight", quote = "You shall not pass. This wing is closed... and may not exist at all. Begone!" }]
# trigger Sublevel-1-Entrance: Taking Sword Angers Knight (source line 524)
[[triggers]]
name = "Sublevel-1-Entrance: Taking Sword Angers Knight"
conditions = [{ type = "takeFromNpc", item_id = "dull_longsword", npc_id = "black_knight" }]
actions = [{ type = "setNpcState", npc_id = "black_knight", state = "mad" }, { type = "npcSays", npc_id = "black_knight", quote = "Wha-- HEY! Give that back, you -- you -- cowardly cur!" }]
# trigger Sublevel-1-Entrance: Return Dull Sword to Knight (source line 529)
[[triggers]]
name = "Sublevel-1-Entrance: Return Dull Sword to Knight"
conditions = [{ type = "giveToNpc", item_id = "dull_longsword", npc_id = "black_knight" }]
actions = [{ type = "npcSays", npc_id = "black_knight", quote = "Right. Now don't do it again, or I shall be forced to bludgeon you with it. You still may not pass." }, { type = "setNpcState", npc_id = "black_knight", state = "normal" }]
# trigger Sublevel-1-Entrance: Sharpen Knight's Sword (source line 534)
[[triggers]]
name = "Sublevel-1-Entrance: Sharpen Knight's Sword"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "dull_longsword", action = "sharpen" }]
actions = [{ type = "replaceItem", old_sym = "dull_longsword", new_sym = "keen_longsword" }, { type = "showMessage", text = "After years of sharpening Ginsu knives to cut open aluminum cans and tomatoes, you have no problem honing the Black Knight's sword to a keen edge." }, { type = "addFlag", flag = { type = "simple", name = "sword-sharpened" } }, { type = "awardPoints", amount = 3 }]
# trigger Sublevel-1-Entrance: Black Knight Kicks Player After Sword Taken (source line 541)
[[triggers]]
name = "Sublevel-1-Entrance: Black Knight Kicks Player After Sword Taken"
conditions = [{ type = "withNpc", npc_id = "black_knight" }, { type = "npcInState", npc_id = "black_knight", state = "mad" }, { type = "missingFlag", flag = "appeased-black-knight" }]
actions = [{ type = "showMessage", text = "The Black Knight prances around the room, occasionally trying to kick you in the shins." }, { type = "npcSaysRandom", npc_id = "black_knight" }]
# trigger Sublevel-1-Entrance: Sharpened Sword Returned (source line 548)
[[triggers]]
name = "Sublevel-1-Entrance: Sharpened Sword Returned"
only_once = true
conditions = [{ type = "giveToNpc", item_id = "keen_longsword", npc_id = "black_knight" }]
actions = [{ type = "restrictItem", item_id = "keen_longsword" }, { type = "addFlag", flag = { type = "simple", name = "appeased-black-knight" } }, { type = "setBarredMessage", exit_from = "sublevel-1-entrance", exit_to = "room-aa-3b", msg = "As you near the door, you are overwhelmed by a sense of spinning through an unending series of fictional realities, compelling you to step away." }, { type = "awardPoints", amount = 5 }, { type = "setNpcState", npc_id = "black_knight", state = "happy" }, { type = "npcSays", npc_id = "black_knight", quote = "hank you, good Sir! For your kind deed, I swear on my sword that I shall not cut you to bits with it. And you may pass wherever you like." }]
# trigger Sublevel-1-Entrance: Black Knight Hints About Vending Machine (source line 559)
[[triggers]]
name = "Sublevel-1-Entrance: Black Knight Hints About Vending Machine"
only_once = true
conditions = [{ type = "withNpc", npc_id = "black_knight" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "npcSays", npc_id = "black_knight", quote = "Lo, good Sir! I grow weary, and require a chalice of electrolytes and caffeine, but cannot leave my post. Nor do I want to dull my new sword doing battle with that infernal contraption in the lobby again. If you pass by there, retrieve one for me and I shall be further in your debt." }]
# trigger Security-Station: Pry Evidence Locker Open (source line 569)
[[triggers]]
name = "Security-Station: Pry Evidence Locker Open"
only_once = true
conditions = [{ type = "actOnItem", target_sym = "evidence_locker_closed", action = "open" }]
actions = [{ type = "replaceItem", old_sym = "evidence_locker_closed", new_sym = "evidence_locker_open" }, { type = "showMessage", text = "Using all your weight, all your might, and most of your reserved F-bomb arsenal you pry the locker open, leaving the door barely attached." }, { type = "awardPoints", amount = 2 }]
# trigger Security-Station: Take Sonic Screwdriver (source line 575)
[[triggers]]
name = "Security-Station: Take Sonic Screwdriver"
only_once = true
conditions = [{ type = "take", item_id = "sonic_screwdriver" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-sonic" } }, { type = "awardPoints", amount = 3 }]
# trigger Med-Bay: EMH/Cure Nausea (source line 582)
[[triggers]]
name = "Med-Bay: EMH/Cure Nausea"
conditions = [{ type = "talkToNpc", npc_id = "emh" }, { type = "hasFlag", flag = "status:nauseated" }, { type = "hasFlag", flag = "read-vogon-poetry" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "cured-vogon-poetry" } }, { type = "removeFlag", flag = "status:nauseated" }, { type = "awardPoints", amount = 3 }, { type = "npcSays", npc_id = "emh", quote = "You poor fool, you look horrible. You've been reading Vogon poetry, hmmm? Here, this should help." }, { type = "showMessage", text = "The EMH gives you a hypospray in the neck, and your nausea subsides." }]
# trigger Med-Bay: Talk to EMH After Finding HAL (source line 592)
[[triggers]]
name = "Med-Bay: Talk to EMH After Finding HAL"
only_once = true
conditions = [{ type = "withNpc", npc_id = "emh" }, { type = "flagInProgress", flag = "hal-reboot" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "Ah -- I hoped I would catch you. Word is, you've seen HAL, or what remains of him. If you want to get him working again -- and I'm not sure I'd advise it -- I may be able to get one of those memory modules for you." }, { type = "setNpcState", npc_id = "emh", state = { custom = "want-emitter" } }, { type = "spawnItemInContainer", item_id = "broken_emitter", container_id = "lost_and_found_box" }, { type = "addFlag", flag = { type = "sequence", name = "mobilize-emh", end = 3 } }, { type = "addFlag", flag = { type = "simple", name = "got-hint-from-emh" } }]
# trigger Med-Bay: EMH/Sonic Hint (source line 606)
[[triggers]]
name = "Med-Bay: EMH/Sonic Hint"
only_once = true
conditions = [{ type = "enter", room_id = "med-bay" }, { type = "hasItem", item_id = "sonic_screwdriver" }, { type = "hasFlag", flag = "mobilize-emh#1" }]
actions = [{ type = "npcSays", npc_id = "emh", quote = "Please state the nature of the med... wait -- is that a sonic screwdriver? I bet you could use that to repair my mobile emitter!" }]
# trigger Med-Bay: Advance Sequence when Broken Emitter Found (source line 612)
[[triggers]]
name = "Med-Bay: Advance Sequence when Broken Emitter Found"
only_once = true
conditions = [{ type = "take", item_id = "broken_emitter" }]
actions = [{ type = "advanceFlag", flag = "mobilize-emh" }]
# trigger Med-Bay: EMH Won't Take Broken Emitter (source line 617)
[[triggers]]
name = "Med-Bay: EMH Won't Take Broken Emitter"
conditions = [{ type = "giveToNpc", item_id = "broken_emitter", npc_id = "emh" }]
actions = [{ type = "npcRefuseItem", npc_id = "emh", reason = "That's my mobile emitter all right, but it's broken. You'll need to find a way to repair it before I can help you with HAL." }]
# trigger Med-Bay: Use Sonic On Emitter (source line 621)
[[triggers]]
name = "Med-Bay: Use Sonic On Emitter"
conditions = [{ type = "useItemOnItem", interaction = "repair", target_id = "broken_emitter", tool_id = "sonic_screwdriver" }]
actions = [{ type = "showMessage", text = "You hold the button down on the sonic. It makes electronic whirring noises while you make a few passes over the emitter." }]
# trigger Med-Bay: Repair Emitter (source line 625)
[[triggers]]
name = "Med-Bay: Repair Emitter"
conditions = [{ type = "actOnItem", target_sym = "broken_emitter", action = "repair" }]
actions = [{ type = "showMessage", text = "After a few seconds, the emitter lights up and reboots, passing all self-tests." }, { type = "replaceItem", old_sym = "broken_emitter", new_sym = "working_emitter" }, { type = "awardPoints", amount = 3 }, { type = "advanceFlag", flag = "mobilize-emh" }]
# trigger Med-Bay: EMH/Goin' Mobile! (source line 633)
[[triggers]]
name = "Med-Bay: EMH/Goin' Mobile!"
conditions = [{ type = "giveToNpc", item_id = "working_emitter", npc_id = "emh" }]
actions = [{ type = "restrictItem", item_id = "working_emitter" }, { type = "advanceFlag", flag = "mobilize-emh" }, { type = "setNpcState", npc_id = "emh", state = "happy" }, { type = "npcSays", npc_id = "emh", quote = "Looks like it's working properly! Let me take it for a spin." }, { type = "showMessage", text = "The EMH flickers, then vanishes in a flash. He reappears a few moments later." }, { type = "npcSays", npc_id = "emh", quote = "All seems to be in order. As promised, I retrieved one of HAL's modules. I dropped it off in the observation room across the hall, but insert it at your own peril." }, { type = "spawnItemInRoom", item_id = "hal_module_1", room_id = "observation-room" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "Heard overhead: \"Will the E.M.H. please return to the med bay? There's been a yellow snow blinding incident.\"" }, { type = "addSpinnerWedge", spinner = "ambientInterior", width = 1, text = "Over the PA: \"E.M.H and sanitation, please report to the lunch room. Mr. Creosote ate a tiny, wafer thin mint again.\"" }]
# trigger Med-Bay: EMH/After HAL Rebooted (source line 646)
[[triggers]]
name = "Med-Bay: EMH/After HAL Rebooted"
only_once = true
conditions = [{ type = "withNpc", npc_id = "emh" }, { type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "setNpcState", npc_id = "emh", state = "normal" }, { type = "npcSays", npc_id = "emh", quote = "Well, now you've done it. HAL is operational again. We'll surely regret it -- or at least *you* will." }]
# trigger Monolith-Room: HAL/Start Reboot Sequence (source line 655)
[[triggers]]
name = "Monolith-Room: HAL/Start Reboot Sequence"
only_once = true
conditions = [{ type = "talkToNpc", npc_id = "hal_9000" }]
actions = [{ type = "addFlag", flag = { type = "sequence", name = "hal-reboot", end = 3 } }, { type = "addFlag", flag = { type = "simple", name = "talked-to-hal" } }, { type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-0" } }, { type = "npcSays", npc_id = "hal_9000", quote = "(when you speak, the red light in HAL's lens begins to pulse slowly, then grows steady)" }]
# trigger Monolith-Room: HAL/Module #1 Inserted (source line 663)
[[triggers]]
name = "Monolith-Room: HAL/Module #1 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_1", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-1-inserted" } }, { type = "restrictItem", item_id = "hal_module_1" }, { type = "showMessage", text = "Memory module #1 magnetically locks into place and lights up." }]
# trigger Monolith-Room: HAL/Module #2 Inserted (source line 671)
[[triggers]]
name = "Monolith-Room: HAL/Module #2 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_2", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-2-inserted" } }, { type = "restrictItem", item_id = "hal_module_2" }, { type = "showMessage", text = "Memory module #2 magnetically locks into place and lights up." }]
# trigger Monolith-Room: HAL/Module #3 Inserted (source line 679)
[[triggers]]
name = "Monolith-Room: HAL/Module #3 Inserted"
only_once = true
conditions = [{ type = "insert", item_id = "hal_module_3", container_id = "hal_memory_bank" }]
actions = [{ type = "advanceFlag", flag = "hal-reboot" }, { type = "addFlag", flag = { type = "simple", name = "module-3-inserted" } }, { type = "restrictItem", item_id = "hal_module_3" }, { type = "showMessage", text = "Memory module #3 magnetically locks into place and lights up." }]
# trigger Monolith-Room: HAL/One Module In (source line 687)
[[triggers]]
name = "Monolith-Room: HAL/One Module In"
conditions = [{ type = "hasFlag", flag = "hal-reboot#1" }]
actions = [{ type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-1" } }]
# trigger Monolith-Room: HAL/Two Modules In (source line 694)
[[triggers]]
name = "Monolith-Room: HAL/Two Modules In"
conditions = [{ type = "hasFlag", flag = "hal-reboot#2" }]
actions = [{ type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-2" } }]
# trigger Monolith-Room: HAL/All Modules In (source line 701)
[[triggers]]
name = "Monolith-Room: HAL/All Modules In"
only_once = true
conditions = [{ type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "awardPoints", amount = 10 }, { type = "setNpcState", npc_id = "hal_9000", state = { custom = "memory-3" } }, { type = "showMessage", text = "All memory now restored, HAL-9000 finishes rebooting and is fully operational." }]
# trigger Monolith-Room: Announce Monolith Access After HAL Rebooted (source line 710)
[[triggers]]
name = "Monolith-Room: Announce Monolith Access After HAL Rebooted"
only_once = true
conditions = [{ type = "flagComplete", flag = "hal-reboot" }, { type = "withNpc", npc_id = "hal_9000" }]
actions = [{ type = "showMessage", text = "HAL-9000's lens turns to focus on the monolith dominating the room." }, { type = "npcSays", npc_id = "hal_9000", quote = "Access granted, Candidate #2112-42. The monolith awaits your touch." }]
# trigger Monolith-Room: Monolith Touch Prevented (HAL not ready) (source line 719)
[[triggers]]
name = "Monolith-Room: Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "useItem", item_id = "monolith", ability = "turnOn" }, { type = "hasFlag", flag = "hal-reboot#0" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's dim red lens flickers briefly but he cannot respond coherently. Something prevents you from touching the ancient artifact - as if an invisible barrier surrounds it." }]
# trigger Monolith-Room: Monolith Touch Prevented (HAL not ready) (source line 719)
[[triggers]]
name = "Monolith-Room: Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "useItem", item_id = "monolith", ability = "turnOn" }, { type = "hasFlag", flag = "hal-reboot#1" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's dim red lens flickers briefly but he cannot respond coherently. Something prevents you from touching the ancient artifact - as if an invisible barrier surrounds it." }]
# trigger Monolith-Room: Monolith Touch Prevented (HAL not ready) (source line 719)
[[triggers]]
name = "Monolith-Room: Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "useItem", item_id = "monolith", ability = "turnOn" }, { type = "hasFlag", flag = "hal-reboot#2" }]
actions = [{ type = "showMessage", text = "As you approach the monolith, HAL-9000's lens swivels toward you." }, { type = "npcSays", npc_id = "hal_9000", quote = "I'm sorry, Candidate. I cannot allow access to the monolith until my systems are fully operational. Please insert one more memory module." }]
# trigger Monolith-Room: Monolith Touch Prevented (HAL not ready) (source line 719)
[[triggers]]
name = "Monolith-Room: Monolith Touch Prevented (HAL not ready)"
conditions = [{ type = "useItem", item_id = "monolith", ability = "turnOn" }, { type = "flagComplete", flag = "hal-reboot" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "touched-monolith" } }, { type = "awardPoints", amount = 15 }, { type = "showMessage", text = "You reach out and place your palm against the monolith's impossibly smooth surface. For a moment, nothing happens. Then reality seems to shiver around you. Images flash through your mind - star-filled voids, impossible geometries, the birth and death of civilizations. You stagger backward, forever changed by the contact. The path to understanding has opened." }]
# trigger Aperture-Lab: Invitation Hint (source line 738)
[[triggers]]
name = "Aperture-Lab: Invitation Hint"
only_once = true
conditions = [{ type = "hasFlag", flag = "got-invitation" }]
actions = [{ type = "scheduleInIf", turns_ahead = 10, condition = { all = [{ type = "hasFlag", flag = "got-invitation" }, { type = "missingFlag", flag = "got-visitor-pass" }, { type = "hasVisited", room_id = "b-a-office" }] }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "The invitation has cooled down enough now for you to give it to the receptionist in the Amble Adventures office ... maybe she'll help you now." }], note = "invitation hint" }]
# trigger Towel / Plaque Hint (source line 746)
[[triggers]]
name = "Towel / Plaque Hint"
only_once = true
conditions = [{ type = "take", item_id = "towel" }]
actions = [{ type = "addFlag", flag = { type = "simple", name = "got-towel" } }, { type = "awardPoints", amount = 3 }, { type = "showMessage", text = "NOW you're a frood who really \"knows where his towel is\"!" }, { type = "scheduleInIf", turns_ahead = 10, condition = { all = [{ type = "hasItem", item_id = "towel" }, { type = "missingFlag", flag = "read-plaque-1" }] }, on_false = { type = "cancel" }, actions = [{ type = "showMessage", text = "Towels can be awfully handy for cleaning grimy things. Just sayin'." }], note = "hint: towel can clean" }]
# trigger Ambient Woodland (source line 758)
[[triggers]]
name = "Ambient Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "high-ridge" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger Ambient Woodland (source line 758)
[[triggers]]
name = "Ambient Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "parish-landing" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger Ambient Woodland (source line 758)
[[triggers]]
name = "Ambient Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "two-sheds-landing" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger Ambient Woodland (source line 758)
[[triggers]]
name = "Ambient Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "two-sheds" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger Ambient Woodland (source line 758)
[[triggers]]
name = "Ambient Woodland"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "guard-post" }]
actions = [{ type = "spinnerMessage", spinner = "ambientWoodland" }]
# trigger Ambient Snowfield (source line 765)
[[triggers]]
name = "Ambient Snowfield"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "snowfield" }]
actions = [{ type = "spinnerMessage", spinner = "ambientSnowfield" }]
# trigger Ambient Snowfield (source line 765)
[[triggers]]
name = "Ambient Snowfield"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "snow-camp" }]
actions = [{ type = "spinnerMessage", spinner = "ambientSnowfield" }]
# trigger Elevator Muzak (source line 772)
[[triggers]]
name = "Elevator Muzak"
conditions = [{ type = "chance", one_in = 3.3333333333333335 }, { type = "inRoom", room_id = "lift-main" }]
actions = [{ type = "spinnerMessage", spinner = "muzak" }]
# trigger Elevator Muzak (source line 772)
[[triggers]]
name = "Elevator Muzak"
conditions = [{ type = "chance", one_in = 3.3333333333333335 }, { type = "inRoom", room_id = "lift-sublevel-1" }]
actions = [{ type = "spinnerMessage", spinner = "muzak" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lift-sublevel-1" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "sublevel-1-entrance" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "corridor-north" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "corridor-south" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "observation-room" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "security-station" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "med-bay" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Near AA-3B (source line 779)
[[triggers]]
name = "Ambient: Near AA-3B"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "monolith-room" }]
actions = [{ type = "spinnerMessage", spinner = "ambientAA3B" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "main-lobby" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "b-a-office" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "restaurant" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "patio" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lift-bank-main" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "lounge" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Ambient: Main Floor (source line 786)
[[triggers]]
name = "Ambient: Main Floor"
conditions = [{ type = "chance", one_in = 5.0 }, { type = "inRoom", room_id = "vip-bathroom" }]
actions = [{ type = "spinnerMessage", spinner = "ambientInterior" }]
# trigger Vogon Poetry Causes Nausea (source line 794)
[[triggers]]
name = "Vogon Poetry Causes Nausea"
conditions = [{ type = "useItem", item_id = "vogon_poetry_book", ability = "read" }]
actions = [{ type = "showMessage", text = "You nearly get through the first poem when the vomiting begins..." }, { type = "addFlag", flag = { type = "simple", name = "read-vogon-poetry" } }, { type = "addFlag", flag = { type = "simple", name = "status:nauseated" } }, { type = "awardPoints", amount = -1 }]
# trigger Status: Nauseated (source line 801)
[[triggers]]
name = "Status: Nauseated"
conditions = [{ type = "hasFlag", flag = "status:nauseated" }, { type = "chance", one_in = 2.0 }]
actions = [{ type = "spinnerMessage", spinner = "nauseated" }]
# trigger Global: Arson-Aid Used (source line 809)
[[triggers]]
name = "Global: Arson-Aid Used"
only_once = true
conditions = [{ type = "useItem", item_id = "flamethrower", ability = "ignite" }]
actions = [{ type = "showMessage", text = "The Initech Arson-Aid melts down into an amorphous, hissing blob. As expected." }]
# trigger Global: Open Delivery Box (source line 814)
[[triggers]]
name = "Global: Open Delivery Box"
only_once = true
conditions = [{ type = "open", item_id = "delivery_box" }]
actions = [{ type = "despawnItem", item_id = "delivery_box" }, { type = "spawnItemCurrentRoom", item_id = "destroyed_box" }, { type = "spawnItemCurrentRoom", item_id = "towel" }, { type = "showMessage", text = """
The box sighs and collapses in a heap as soon as you touch it, relieved that its mission is over. Inside, you find a nanotruss-reinforced tachyon-powered towel with an attached note:

                Always be a frood who knows where his towel is.
                                -- F.P.""" }]
# trigger Global: Take Vogon Poetry (source line 822)
[[triggers]]
name = "Global: Take Vogon Poetry"
conditions = [{ type = "take", item_id = "vogon_poetry_book" }]
actions = [{ type = "showMessage", text = "A greasy feeling of nausea overcomes you." }]
# trigger Global: Drop Vogon Poetry (source line 828)
[[triggers]]
name = "Global: Drop Vogon Poetry"
conditions = [{ type = "drop", item_id = "vogon_poetry_book" }, { type = "missingFlag", flag = "read-vogon-poetry" }]
actions = [{ type = "showMessage", text = "That greasy, queasy feeling subsides." }]
# trigger Global: Drop Vogon Poetry (source line 828)
[[triggers]]
name = "Global: Drop Vogon Poetry"
conditions = [{ type = "drop", item_id = "vogon_poetry_book" }, { type = "hasFlag", flag = "cured-vogon-poetry" }]
actions = [{ type = "showMessage", text = "That greasy, queasy feeling subsides." }]
# trigger Global: Drop Vogon Poetry (source line 828)
[[triggers]]
name = "Global: Drop Vogon Poetry"
conditions = [{ type = "drop", item_id = "vogon_poetry_book" }, { type = "hasFlag", flag = "read-vogon-poetry" }, { type = "missingFlag", flag = "cured-vogon-poetry" }]
actions = [{ type = "showMessage", text = "Getting rid of the book helps a little, but the poem is burned into your mind and the nausea continues." }]
# trigger Global: Cannot Drop No Cake (source line 839)
[[triggers]]
name = "Global: Cannot Drop No Cake"
conditions = [{ type = "drop", item_id = "no_cake" }]
actions = [{ type = "despawnItem", item_id = "no_cake" }, { type = "spawnItemInInventory", item_id = "no_cake" }, { type = "showMessage", text = "Try as you might, you cannot rid yourself of the feeling of a missing, promised dessert. The cake was a lie." }]
# trigger Global: Fishing Line (attach clip to floss) (source line 849)
[[triggers]]
name = "Global: Fishing Line (attach clip to floss)"
conditions = [{ type = "useItemOnItem", interaction = "attach", target_id = "dental_floss", tool_id = "paper_clip" }]
actions = [{ type = "despawnItem", item_id = "paper_clip" }, { type = "despawnItem", item_id = "dental_floss" }, { type = "spawnItemInInventory", item_id = "fishing_line" }, { type = "showMessage", text = "You MacGyvered the floss and paper clip into a fishing line!" }, { type = "awardPoints", amount = 3 }]
# trigger Global: Fishing Line (attach floss to clip) (source line 858)
[[triggers]]
name = "Global: Fishing Line (attach floss to clip)"
conditions = [{ type = "useItemOnItem", interaction = "attach", target_id = "paper_clip", tool_id = "dental_floss" }]
actions = [{ type = "despawnItem", item_id = "paper_clip" }, { type = "despawnItem", item_id = "dental_floss" }, { type = "spawnItemInInventory", item_id = "fishing_line" }, { type = "showMessage", text = "You MacGyvered the floss and paper clip into a fishing line!" }, { type = "awardPoints", amount = 3 }]
